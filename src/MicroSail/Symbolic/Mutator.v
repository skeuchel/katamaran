(******************************************************************************)
(* Copyright (c) 2019 Steven Keuchel                                          *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Arith.PeanoNat
     Bool.Bool
     Classes.Morphisms
     Classes.Morphisms_Prop
     Classes.Morphisms_Relations
     Classes.RelationClasses
     Lists.List
     Logic.EqdepFacts
     Program.Equality
     Program.Tactics
     Relations.Relation_Definitions
     Relations.Relation_Operators
     Strings.String
     ZArith.ZArith.
From Coq Require
     Vector.
From Equations Require Import Equations.

From MicroSail Require Import
     Sep.Spec
     SemiConcrete.Outcome
     Syntax.

From stdpp Require
     base finite list option.

Import CtxNotations.
Import EnvNotations.
Import ListNotations.
Import OutcomeNotations.

Set Implicit Arguments.

Delimit Scope mutator_scope with mut.
Delimit Scope smut_scope with smut.

Module Mutators
       (termkit : TermKit)
       (progkit : ProgramKit termkit)
       (assertkit : AssertionKit termkit progkit)
       (symcontractkit : SymbolicContractKit termkit progkit assertkit).

  Export symcontractkit.

  Declare Scope modal.
  Delimit Scope modal with modal.

  Import Entailment.

  Record World : Type :=
    MkWorld
      { wctx :> LCtx;
        wco  : PathCondition wctx;
      }.

  Record Acc (w1 w2 : World) : Type :=
    MkAcc
      { wsub :> Sub w1 w2;
        (* went :  wco w2 ‚ä¢ subst (wco w1) wsub; *)
      }.

  Notation "w1 ‚äí w2" := (Acc w1 w2) (at level 80).

  Definition went {w0 w1} (œâ01 : w0 ‚äí w1) : Prop :=
    wco w1 ‚ä¢ subst (wco w0) (wsub œâ01).

  Local Obligation Tactic := idtac.
  Definition wrefl {w} : w ‚äí w :=
    {| wsub := sub_id w |}.
  (* Next Obligation. *)
  (*   intros ?. now rewrite subst_sub_id. *)
  (* Qed. *)

  Lemma went_wrefl {w} :
    went (wrefl (w := w)).
  Proof.
    intros Œπ. cbn.
    now rewrite subst_sub_id.
  Qed.

  Definition wtrans {w0 w1 w2} : w0 ‚äí w1 -> w1 ‚äí w2 -> w0 ‚äí w2 :=
    fun œâ01 œâ12 => {| wsub := subst (T := Sub _) œâ01 œâ12 |}.
  (* Next Obligation. *)
  (*   intros *. *)
  (*   rewrite subst_sub_comp. *)
  (*   intros Œπ2 Hpc2. *)
  (*   rewrite inst_subst. *)
  (*   apply (went œâ01 (inst (T := Sub _) œâ12 Œπ2)). *)
  (*   rewrite <- inst_subst. *)
  (*   apply (went œâ12 Œπ2 Hpc2). *)
  (* Defined. *)

  Lemma went_wtrans {w0 w1 w2} {œâ01 : w0 ‚äí w1} {œâ12 : w1 ‚äí w2} :
    went œâ01 -> went œâ12 -> went (wtrans œâ01 œâ12).
  Proof.
    intros Hœâ01 Hœâ12. unfold went, wtrans.
    cbn [wctx wco wsub].
    rewrite subst_sub_comp.
    transitivity (subst (wco w1) œâ12).
    apply Hœâ12.
    apply proper_subst_entails.
    apply Hœâ01.
  Qed.

  Definition wnil : World := @MkWorld ctx_nil nil.
  Definition wsnoc (w : World) (b : ùë∫ * Ty) : World :=
    @MkWorld (wctx w ‚ñª b) (subst (wco w) sub_wk1).
  Definition wformula (w : World) (f : Formula w) : World :=
    @MkWorld (wctx w) (cons f (wco w)).
  Definition wsubst (w : World) x {œÉ} {xIn : x :: œÉ ‚àà w} (t : Term (w - (x :: œÉ)) œÉ) : World.
  Proof.
    apply (@MkWorld (ctx_remove xIn)).
    refine (subst (wco w) _).
    apply sub_single.
    apply t.
  Defined.
  Global Arguments wsubst w x {œÉ xIn} t.

  Fixpoint wcat (w : World) (Œ£ : LCtx) : World :=
    match Œ£ with
    | ctx_nil      => w
    | ctx_snoc Œ£ b => wsnoc (wcat w Œ£) b
    end.

  Definition wsnoc_sup {w : World} {b : ùë∫ * Ty} : w ‚äí wsnoc w b :=
    MkAcc w (wsnoc w b) sub_wk1.
  (* Next Obligation. *)
  (* Proof. *)
  (*   intros w b Œπ Hpc. apply Hpc. *)
  (* Qed. *)

  Lemma went_wsnoc_sup {w : World} {b : ùë∫ * Ty} :
    went (@wsnoc_sup w b).
  Proof.
    intros Œπ Hpc. apply Hpc.
  Qed.

  Definition wsnoc_sub {w1 w2 : World} (œâ12 : w1 ‚äí w2) (b : ùë∫ * Ty) (t : Term w2 (snd b)) :
    wsnoc w1 b ‚äí w2 :=
    MkAcc (wsnoc w1 b) w2 (sub_snoc œâ12 b t).

  Lemma went_wsnoc_sub {w1 w2 : World} (œâ12 : w1 ‚äí w2) (b : ùë∫ * Ty) (t : Term w2 (snd b)) :
    went œâ12 ->
    went (@wsnoc_sub w1 w2 œâ12 b t).
  Proof.
    unfold went, entails. intros Hpc12 Œπ2 Hpc2.
    specialize (Hpc12 Œπ2 Hpc2).
    rewrite inst_subst in Hpc12.
    unfold wsnoc, wsnoc_sub. cbn - [subst inst].
    rewrite ?inst_subst.
    rewrite inst_sub_snoc.
    rewrite inst_sub_wk1.
    apply Hpc12.
  Qed.

  Fixpoint wcat_sub {w1 w2 : World} (œâ12 : w1 ‚äí w2) {Œî : LCtx} :
    Sub Œî w2 ->
    wcat w1 Œî ‚äí w2.
  Proof.
    destruct Œî; cbn [wcat].
    - intros _. apply œâ12.
    - intros Œ∂. destruct (snocView Œ∂).
      apply wsnoc_sub.
      apply wcat_sub.
      auto.
      auto.
      auto.
  Defined.

  (* Next Obligation. *)
  (* Proof. *)
  (* Qed. *)

  Definition wformula_sup {w : World} {f : Formula w} : w ‚äí wformula w f :=
    MkAcc w (wformula w f) (sub_id (wctx w)).
  (* Next Obligation. *)
  (* Proof. *)
  (*   intros w f Œπ. *)
  (*   rewrite subst_sub_id. cbn. *)
  (*   rewrite inst_pathcondition_cons. *)
  (*   now intros []. *)
  (* Qed. *)

  Lemma went_wformula_sup {w f} :
    went (@wformula_sup w f).
  Proof.
    intros Œπ.
    rewrite subst_sub_id. cbn.
    rewrite inst_pathcondition_cons.
    now intros [].
  Qed.

  Definition wformula_sub {w : World} {f : Formula w} : wformula w f ‚äí w :=
    MkAcc (wformula w f) w (sub_id (wctx w)).
  (* Next Obligation. *)
  (* Proof. *)
  (*   intros w f Œπ. *)
  (*   rewrite subst_sub_id. cbn. *)
  (*   rewrite inst_pathcondition_cons. *)
  (*   now intros []. *)
  (* Qed. *)

  Definition wformulas (w : World) (fmls : List Formula w) : World :=
    @MkWorld (wctx w) (app fmls (wco w)).

  Definition wformulas_sup (w : World) (fmls : List Formula w) :
    w ‚äí wformulas w fmls.
  Proof.
    constructor.
    apply (sub_id (wctx w)).
  Defined.

  Definition wred_sup {w : World} b (t : Term w (snd b)) :
    wsnoc w b ‚äí w :=
    MkAcc (wsnoc w b) w (sub_snoc (sub_id w) b t).

  Definition wsubst_sup {w : World} {x œÉ} {xIn : x :: œÉ ‚àà w} {t : Term (w - (x :: œÉ)) œÉ} :
    w ‚äí wsubst w x t :=
    MkAcc w (wsubst w x t) (sub_single xIn t).
  (* Next Obligation. *)
  (* Proof. *)
  (*   intros w x œÉ xIn t Œπ Hpc. apply Hpc. *)
  (* Qed. *)

  Definition wacc_snoc {w0 w1 : World} (œâ01 : w0 ‚äí w1) (b : ùë∫ * Ty) :
    wsnoc w0 b ‚äí wsnoc w1 b :=
    MkAcc (wsnoc w0 b) (wsnoc w1 b) (sub_up1 œâ01).
  (* Next Obligation. *)
  (*   intros ? ? ? ?. *)
  (*   unfold wsnoc in *. *)
  (*   cbn [wco wctx] in *. *)
  (*   rewrite <- subst_sub_comp. *)
  (*   rewrite sub_comp_wk1_comm. *)
  (*   rewrite subst_sub_comp. *)
  (*   apply proper_subst_entails. *)
  (*   apply went. *)
  (* Qed. *)

  Lemma went_wacc_snoc {w0 w1} {œâ01 : w0 ‚äí w1} {b : ùë∫ * Ty} :
    went œâ01 ->
    went (wacc_snoc œâ01 b).
  Proof.
    unfold wacc_snoc, wsnoc.
    intros Hœâ01 Œπ1 Hpc1. cbn - [inst] in *.
    specialize (Hœâ01 (inst sub_wk1 Œπ1)).
    rewrite <- subst_sub_comp.
    rewrite sub_comp_wk1_comm.
    cbn in *.
    rewrite inst_subst in Hœâ01.
    rewrite ?inst_subst.
    rewrite ?inst_subst in Hpc1.
    intuition.
  Qed.

  Definition wacc_formula {w0 w1} (œâ01 : w0 ‚äí w1) (fml : Formula w0) :
    wformula w0 fml ‚äí wformula w1 (subst fml œâ01) :=
    MkAcc (MkWorld (cons fml (wco w0))) (MkWorld (cons (subst fml œâ01) (wco w1))) œâ01.

  Lemma went_wacc_formula {w0 w1} {œâ01 : w0 ‚äí w1} {fml : Formula w0} :
    went œâ01 ->
    went (wacc_formula œâ01 fml).
  Proof.
    unfold wacc_formula, wformula.
    intros Hœâ01 Œπ1 Hpc1. specialize (Hœâ01 Œπ1).
    cbn - [inst] in *.
    rewrite ?inst_pathcondition_cons, ?inst_subst in *.
    intuition.
  Qed.

  Notation WList A := (fun w : World => list (A w)).
  Notation STerm œÉ := (fun Œ£ => Term Œ£ œÉ).

  Module WorldInstance.

    Record WInstance (w : World) : Set :=
      MkWInstance
        { Œπassign :> SymInstance w;
          Œπvalid  : instpc (wco w) Œπassign;
        }.

    Program Definition winstance_formula {w} (Œπ : WInstance w) (fml : Formula w) (p : inst (A := Prop) fml Œπ) :
      WInstance (wformula w fml) :=
      {| Œπassign := Œπ; |}.
    Next Obligation.
    Proof.
      intros. cbn.
      apply inst_pathcondition_cons. split; auto.
      apply Œπvalid.
    Qed.

    Program Definition winstance_snoc {w} (Œπ : WInstance w) {b : ùë∫ * Ty} (v : Lit (snd b)) :
      WInstance (wsnoc w b) :=
      {| Œπassign := env_snoc (Œπassign Œπ) b v; |}.
    Next Obligation.
    Proof.
      intros. unfold wsnoc. cbn [wctx wco].
      rewrite inst_subst, inst_sub_wk1.
      apply Œπvalid.
    Qed.

    Fixpoint winstance_cat {Œ£} (Œπ : WInstance Œ£) {Œî} (ŒπŒî : SymInstance Œî) :
      WInstance (wcat Œ£ Œî).
    Proof.
      destruct ŒπŒî; cbn.
      - apply Œπ.
      - apply winstance_snoc.
        apply winstance_cat.
        apply Œπ.
        apply ŒπŒî.
        apply db.
    Defined.

    Program Definition winstance_subst {w} (Œπ : WInstance w) {x œÉ} {xIn : x :: œÉ ‚àà w}
      (t : Term (w - (x :: œÉ)) œÉ) (p : inst t (env_remove' (x :: œÉ) (Œπassign Œπ) xIn) = env_lookup (Œπassign Œπ) xIn) :
      WInstance (wsubst w x t) :=
      @MkWInstance (wsubst w x t) (env_remove' _ (Œπassign Œπ) xIn) _.
    Next Obligation.
      intros. cbn. rewrite inst_subst.
      rewrite inst_sub_single.
      apply Œπvalid.
      apply p.
    Qed.

    Program Definition instacc {w0 w1} (œâ01 : w0 ‚äí w1) (Hœâ01 : went œâ01) (Œπ : WInstance w1) : WInstance w0 :=
       {| Œπassign := inst (wsub œâ01) (Œπassign Œπ) |}.
    Next Obligation.
    Proof.
      intros w0 w1 œâ01 Hœâ01 Œπ.
      rewrite <- inst_subst.
      apply Hœâ01.
      apply Œπvalid.
    Qed.

  End WorldInstance.

  Definition TYPE : Type := World -> Type.
  Bind Scope modal with TYPE.
  Definition Valid (A : TYPE) : Type :=
    forall w, A w.
  Definition Impl (A B : TYPE) : TYPE :=
    fun w => A w -> B w.
  Definition Box (A : TYPE) : TYPE :=
    fun w0 => forall w1, w0 ‚äí w1 -> A w1.
  Definition Snoc (A : TYPE) (b : ùë∫ * Ty) : TYPE :=
    fun w => A (wsnoc w b).
  Definition Forall {I : Type} (A : I -> TYPE) : TYPE :=
    fun w => forall i : I, A i w.
  Definition Cat (A : TYPE) (Œî : LCtx) : TYPE :=
    fun w => A (wcat w Œî).

  Module ModalNotations.

    Notation "‚ä¢ A" := (Valid A%modal) (at level 100).
    Notation "A -> B" := (Impl A%modal B%modal) : modal.
    Notation "‚ñ° A" := (Box A%modal) (at level 85, format "‚ñ° A", right associativity) : modal.
    Notation "‚åú A ‚åù" := (fun (_ : World) => A%type) (at level 0, format "‚åú A ‚åù") : modal.
    Notation "'‚àÄ' x .. y , P " :=
      (Forall (fun x => .. (Forall (fun y => P%modal)) ..))
        (at level 99, x binder, y binder, right associativity)
      : modal.

  End ModalNotations.
  Import ModalNotations.
  Open Scope modal.

  Definition K {A B} :
    ‚ä¢ ‚ñ°(A -> B) -> (‚ñ°A -> ‚ñ°B) :=
    fun w0 f a w1 œâ01 =>
      f w1 œâ01 (a w1 œâ01).
  Definition T {A} :
    ‚ä¢ ‚ñ°A -> A :=
    fun w0 a => a w0 wrefl.
  Definition four {A} :
    ‚ä¢ ‚ñ°A -> ‚ñ°‚ñ°A :=
    fun w0 a w1 œâ01 w2 œâ12 =>
      a w2 (wtrans œâ01 œâ12).
  Global Arguments four : simpl never.

  (* faster version of (four _ sub_wk1) *)
  (* Definition four_wk1 {A} : *)
  (*   ‚ä¢ ‚ñ°A -> ‚àÄ b, Snoc (‚ñ°A) b := *)
  (*   fun w0 a b w1 œâ01 => a w1 (env_tail œâ01). *)
  (* Arguments four_wk1 {A Œ£0} pc0 a b [Œ£1] Œ∂01 : rename. *)

  Definition valid_box {A} :
    (‚ä¢ A) -> (‚ä¢ ‚ñ°A) :=
    fun a w0 w1 œâ01 => a w1.
  Global Arguments valid_box {A} a {w} [w1].

  Definition map_box {A B} (f : ‚ä¢ A -> B) : ‚ä¢ ‚ñ°A -> ‚ñ°B :=
    fun w0 a w1 œâ01 => f w1 (a w1 œâ01).

  Notation "f <$> a" := (map_box f a) (at level 40, left associativity).
  Notation "f <*> a" := (K f a) (at level 40, left associativity).

  Definition PROP : TYPE :=
    fun _ => Prop.

  Definition comp {A B C} :
    ‚ä¢ (B -> C) -> (A -> B) -> (A -> C) :=
    fun w0 => Basics.compose.

  Definition bcomp {A B C} :
    ‚ä¢ ‚ñ°(B -> C) -> ‚ñ°(A -> B) -> ‚ñ°(A -> C) :=
    fun w0 f g => comp <$> f <*> g.

  Module LogicalRelation.

    Import Entailment.

    Class LR (A : TYPE) : Type :=
      lr : forall w0 w1, w0 ‚äí w1 -> A w0 -> A w1 -> Prop.

    Class LRRefl (A : TYPE) `{LR A} : Prop :=
      { lr_refl :
          forall w0 (a : A w0),
            lr wrefl a a;
      }.
    Global Arguments LRRefl A {_}.

    Global Instance LRPROP : LR PROP :=
      fun w0 w1 œâ01 (P : PROP w0) (Q : PROP w1) => (P -> Q)%type.
    Global Instance LRReflPROP : LRRefl PROP :=
      {| lr_refl w0 (P : PROP w0) (HP : P) := HP;
      |}.

    Global Instance LRTerm {œÉ} : LR (STerm œÉ) :=
      fun w0 w1 œâ01 t0 t1 =>
        forall Œπ1 : SymInstance w1,
          inst t0 (inst (T := Sub _) œâ01 Œπ1) = inst t1 Œπ1.

    Global Instance LRFormula : LR Formula :=
      fun w0 w1 œâ01 f0 f1 =>
        forall Œπ1 : SymInstance w1,
          instpc (wco w1) Œπ1 ->
          inst (T := Formula) (A := Prop) f0 (inst (T:= Sub _) œâ01 Œπ1) ->
          inst (T := Formula) (A := Prop) f1 Œπ1.
    Global Instance LRReflFormula : LRRefl Formula.
    Proof.
      constructor. unfold lr, LRFormula. intros *.
      unfold wrefl. cbn. now rewrite inst_sub_id.
    Qed.

    Global Instance LRImpl {A B} `{LR A, LR B} : LR (A -> B) :=
      fun w0 w1 œâ01 f0 f1 =>
           forall a0 a1,
             lr œâ01 a0 a1 ->
             lr œâ01 (f0 a0) (f1 a1).

    (* Instance LRPair {A B} `{LR A, LR B} : LR (Pair A B) := *)
    (*   fun Œ£0 pc0 Œ£1 Œ∂01 pc1 ab1 ab2 => *)
    (*     let (a1, b1) := ab1 in *)
    (*     let (a2, b2) := ab2 in *)
    (*     lr pc0 Œ∂01 pc1 a1 a2 /\ lr pc0 Œ∂01 pc1 b1 b2. *)

    Global Instance LRBox {A} `{LR A} : LR (Box A) :=
      fun w0 w1 œâ01 b1 b2 =>
        forall w2 (œâ12 : w1 ‚äí w2),
          went œâ12 ->
          lr œâ12 (b1 _ œâ01) (b2 _ œâ12).

    Global Instance LRReflBox {A} `{LR A} : LRRefl (Box A).
    Proof.
      constructor. unfold lr, LRBox.
      intros w0 a0 w1 œâ01.
      (* Downwards close is LRRefl for Box right!? *)
    Abort.

    Global Instance LRInstance : LR SymInstance :=
      fun w0 w1 œâ01 Œπ0 Œπ1 =>
        (* instpc Œπ1 pc1 /\ instpc Œπ0 pc0 /\ *)
        Œπ0 = inst (wsub œâ01) Œπ1.

    Global Instance LRReflInstance : LRRefl SymInstance.
    Proof.
      constructor. unfold lr, LRInstance.
      intros w0 Œπ0. unfold wrefl. cbn.
      now rewrite inst_sub_id.
    Qed.

    Definition dcl {A} `{LR A} : ‚ä¢ ‚ñ°A -> PROP :=
      fun w0 a =>
        forall w1 (œâ01 : w0 ‚äí w1),
          went œâ01 ->
          lr œâ01 a (four a œâ01).

    Lemma dcl_four {A} `{LR A} {w0} (a : Box A w0) (a_dcl : dcl a) :
      forall w1 (œâ01 : w0 ‚äí w1), went œâ01 -> dcl (four a œâ01).
    Proof.
      unfold dcl, four, lr, LRBox, went in *; cbn.
      intros w1 œâ01 Hœâ01.
      intros w2 œâ12 Hœâ12.
      intros w3 œâ23 Hœâ23.
      unfold wtrans. cbn [wsub].
      rewrite <- sub_comp_assoc.
      apply a_dcl; auto. cbn [wsub].
      rewrite subst_sub_comp.
      transitivity (subst (wco w1) œâ12); auto.
      now apply proper_subst_entails.
    Qed.

    (* Lemma dcl_four_wk1 {A} `{LR A} {Œ£0} (pc0 : PathCondition Œ£0) (a : Box A Œ£0) (a_dcl : dcl pc0 a) : *)
    (*   forall (b : ùë∫ * Ty), *)
    (*     dcl (subst pc0 sub_wk1) (four_wk1 pc0 a b). *)
    (* Proof. *)
    (*   unfold dcl, four_wk1, four, lr, LRBox. *)
    (*   intros b. *)
    (*   intros Œ£1 Œ∂01 pc1 Œ£2 Œ∂12 pc2 Hpc23. *)
    (*   rewrite <- ?sub_comp_wk1_tail. *)
    (*   rewrite <- sub_comp_assoc. *)
    (*   apply a_dcl; auto. *)
    (*   now rewrite subst_sub_comp. *)
    (* Qed. *)

    (* Lemma dcl_four_cons {A} `{LR A} {Œ£} (pc : PathCondition Œ£) *)
    (*   (fml : Formula Œ£) (a : Box A Œ£) (a_dcl : dcl pc a) : *)
    (*   dcl (cons fml pc) a. *)
    (* Proof. *)
    (*   intros Œ£1 Œ∂01 pc1 Hpc01. cbn in Hpc01. *)
    (*   apply entails_cons in Hpc01. destruct Hpc01. *)
    (*   now apply a_dcl. *)
    (* Qed. *)

    Global Hint Resolve dcl_four : dcl.
    (* Global Hint Resolve dcl_four_wk1 : dcl. *)
    (* Global Hint Resolve dcl_four_cons : dcl. *)

  End LogicalRelation.

  Class Persistent (A : TYPE) (* `{LogicalRelation.LR A} *) : Type :=
    persist     : ‚ä¢ A -> ‚ñ°A.
      (* persist_lr  : forall w0 (a : A w0) w1 (œâ01 : w0 ‚äí w1), *)
      (*     LogicalRelation.lr œâ01 a (persist a œâ01); *)
      (* persist_dcl : *)
      (*   forall w (a : A w), *)
      (*     LogicalRelation.dcl (persist a) *)
  (* Global Arguments Persistent A {_}. *)

  Global Instance persist_subst {A} `{Subst A} : Persistent A :=
    fun w0 x w1 œâ01 => subst x œâ01.

  Notation persist__term t :=
    (@persist (STerm _) (@persist_subst (fun Œ£ => Term Œ£ _) (@SubstTerm _)) _ t).

  Section Obligations.

    Inductive Obligation {Œ£} (msg : Message Œ£) (fml : Formula Œ£) (Œπ : SymInstance Œ£) : Prop :=
    | obligation (p : inst fml Œπ : Prop).

  End Obligations.

  Section MultiSubs.

    Inductive MultiSub (w : World) : World -> Type :=
    | multisub_id        : MultiSub w w
    | multisub_cons {w' x œÉ} (xIn : (x::œÉ) ‚àà w) (t : Term (wctx w - (x::œÉ)) œÉ)
                    (ŒΩ : MultiSub (wsubst w x t) w')
                    : MultiSub w w'.

    Global Arguments multisub_id {_}.
    Global Arguments multisub_cons {_ _} x {_ _} t ŒΩ.

    Fixpoint wmultisub_sup {w1 w2} (ŒΩ : MultiSub w1 w2) : w1 ‚äí w2 :=
      match ŒΩ with
      | multisub_id         => wrefl
      | multisub_cons _ _ ŒΩ => wtrans wsubst_sup (wmultisub_sup ŒΩ)
      end.

    Fixpoint sub_multishift {w1 w2} (Œ∂ : MultiSub w1 w2) : Sub w2 w1 :=
      match Œ∂ with
      | multisub_id         => sub_id _
      | multisub_cons x t Œ∂ => subst (sub_multishift Œ∂) (sub_shift _)
      end.

    Fixpoint inst_multisub {w0 w1} (Œ∂ : MultiSub w0 w1) (Œπ : SymInstance w0) : Prop :=
      match Œ∂ with
      | multisub_id => True
      | @multisub_cons _ Œ£' x œÉ xIn t Œ∂0 =>
        let Œπ' := env_remove' (x :: œÉ) Œπ xIn in
        env_lookup Œπ xIn = inst t Œπ' /\ inst_multisub Œ∂0 Œπ'
      end.

    Lemma inst_multi {w1 w2 : World} (Œπ1 : SymInstance w1) (Œ∂ : MultiSub w1 w2) :
      inst_multisub Œ∂ Œπ1 ->
      inst (wsub (wmultisub_sup Œ∂)) (inst (sub_multishift Œ∂) Œπ1) = Œπ1.
    Proof.
      intros HŒ∂. induction Œ∂; cbn - [subst].
      - now rewrite ?inst_sub_id.
      - cbn in HŒ∂. destruct HŒ∂ as [? HŒ∂]. rewrite <- inst_sub_shift in HŒ∂.
        rewrite ?inst_subst.
        rewrite IHŒ∂; auto. rewrite inst_sub_shift.
        now rewrite inst_sub_single.
    Qed.

  End MultiSubs.

  Section Solver.

    Definition try_solve_eq {Œ£ œÉ} (t1 t2 : Term Œ£ œÉ) : option bool :=
      if Term_eqb t1 t2
      then Some true
      else
        (* If the terms are literals, we can trust the negative result. *)
        match t1 , t2 with
        | term_lit _ _ , term_lit _ _ => Some false
        | term_inr _   , term_inl _   => Some false
        | term_inl _   , term_inr _   => Some false
        | _            , _            => None
        end.

    Lemma try_solve_eq_spec {Œ£ œÉ} (t1 t2 : Term Œ£ œÉ) :
      OptionSpec
        (fun b => forall Œπ, inst t1 Œπ = inst t2 Œπ <-> is_true b)
        True
        (try_solve_eq t1 t2).
    Proof.
      unfold try_solve_eq.
      destruct (Term_eqb_spec t1 t2).
      - constructor. intros. apply reflect_iff.
        constructor. congruence.
      - destruct t1; dependent elimination t2; constructor; auto;
        intros; apply reflect_iff; constructor; cbn; congruence.
    Qed.

    (* Check if the given formula is always true or always false for any
       assignments of the logic variables. *)
    Definition try_solve_formula {Œ£} (fml : Formula Œ£) : option bool :=
      match fml with
      | formula_bool t =>
        match t in Term _ œÉ return option (Lit œÉ)
        with
        | term_lit _ b => Some b
        | _            => None
        end
      | formula_prop _ _ => None
      | formula_eq t1 t2 => try_solve_eq t1 t2
        (* else Term_eqvb t1 t2 *)
      | formula_neq t1 t2 => option_map negb (try_solve_eq t1 t2)
        (* else option_map negb (Term_eqvb t1 t2) *)
      end.

    Lemma try_solve_formula_spec {Œ£} (fml : Formula Œ£) :
      OptionSpec
        (fun b => forall Œπ, inst fml Œπ <-> is_true b)
        True
        (try_solve_formula fml).
    Proof.
      destruct fml; cbn.
      - dependent elimination t; constructor; auto.
      - constructor; auto.
      - destruct (try_solve_eq_spec t1 t2); now constructor.
      - destruct (try_solve_eq_spec t1 t2); constructor; auto.
        intros Œπ. specialize (H Œπ). destruct a; intuition.
    Qed.

    (* Poor man's unification *)
    Definition try_unify {w : World} {œÉ} (t1 t2 : Term w œÉ) :
      option { w' & MultiSub w w' } :=
      match t1 with
      | @term_var _ œÇ œÉ œÇInŒ£ =>
        fun t2 : Term w œÉ =>
          match occurs_check œÇInŒ£ t2 with
          | Some t => Some (existT _ (multisub_cons œÇ t multisub_id))
          | None => None
          end
      | _ => fun _ => None
      end t2.

    Definition try_propagate {w : World} (fml : Formula w) :
      option { w' & MultiSub w w' } :=
      match fml with
      | formula_eq t1 t2 =>
        match try_unify t1 t2 with
        | Some r => Some r
        | None => try_unify t2 t1
        end
      | _ => None
      end.

    Lemma try_unify_spec {w : World} {œÉ} (t1 t2 : Term w œÉ) :
      OptionSpec (fun '(existT w' ŒΩ) => forall Œπ, inst t1 Œπ = inst t2 Œπ <-> inst_multisub ŒΩ Œπ) True (try_unify t1 t2).
    Proof.
      unfold try_unify. destruct t1; cbn; try (constructor; auto; fail).
      destruct (occurs_check œÇInŒ£ t2) eqn:Heq; constructor; auto.
      apply (occurs_check_sound (T := fun Œ£ => Term Œ£ _)) in Heq. subst.
      intros Œπ. rewrite inst_subst, inst_sub_shift.
      cbn. intuition.
    Qed.

    Lemma try_propagate_spec {w : World} (fml : Formula w) :
      OptionSpec (fun '(existT w' ŒΩ) => forall Œπ, (inst fml Œπ : Prop) <-> inst_multisub ŒΩ Œπ) True (try_propagate fml).
    Proof.
      unfold try_propagate; destruct fml; cbn; try (constructor; auto; fail).
      destruct (try_unify_spec t1 t2) as [[w' ŒΩ] HYP|_]. constructor. auto.
      destruct (try_unify_spec t2 t1) as [[w' ŒΩ] HYP|_]. constructor.
      intros Œπ. specialize (HYP Œπ). intuition.
      now constructor.
    Qed.

    Open Scope lazy_bool_scope.
    Equations(noind) formula_eqb {Œ£} (f1 f2 : Formula Œ£) : bool :=
      formula_eqb (formula_bool t1) (formula_bool t2) := Term_eqb t1 t2;
      formula_eqb (@formula_eq _ œÉ t11 t12) (@formula_eq _ œÑ t21 t22) with eq_dec œÉ œÑ => {
        formula_eqb (@formula_eq _ œÉ t11 t12) (@formula_eq _ ?(œÉ) t21 t22) (left eq_refl) :=
          Term_eqb t11 t21 &&& Term_eqb t12 t22;
       formula_eqb (@formula_eq _ œÉ t11 t12) (@formula_eq _ œÑ t21 t22) (right _) := false
      };
      formula_eqb (@formula_neq _ œÉ t11 t12) (@formula_neq _ œÑ t21 t22) with eq_dec œÉ œÑ => {
        formula_eqb (@formula_neq _ œÉ t11 t12) (@formula_neq _ ?(œÉ) t21 t22) (left eq_refl) :=
          Term_eqb t11 t21 &&& Term_eqb t12 t22;
        formula_eqb (@formula_neq _ œÉ t11 t12) (@formula_neq _ œÑ t21 t22) (right _) := false
      };
      formula_eqb _ _ := false.

    Lemma formula_eqb_spec {Œ£} (f1 f2 : Formula Œ£) :
      BoolSpec (f1 = f2) True (formula_eqb f1 f2).
    Proof.
      induction f1; dependent elimination f2;
        simp formula_eqb;
        try (constructor; auto; fail).
      - destruct (Term_eqb_spec t t0); constructor; intuition.
      - destruct (eq_dec œÉ œÉ0); cbn.
        + destruct e.
          repeat
            match goal with
            | |- context[Term_eqb ?t1 ?t2] =>
              destruct (Term_eqb_spec t1 t2); cbn;
                try (constructor; intuition; fail)
            end.
        + constructor; auto.
      - destruct (eq_dec œÉ œÉ1); cbn.
        + destruct e.
          repeat
            match goal with
            | |- context[Term_eqb ?t1 ?t2] =>
              destruct (Term_eqb_spec t1 t2); cbn;
                try (constructor; intuition; fail)
            end.
        + constructor; auto.
    Qed.

    Fixpoint try_assumption {Œ£} (pc : PathCondition Œ£) (fml : Formula Œ£) {struct pc} : bool :=
      match pc with
      | nil       => false
      | cons f pc => formula_eqb f fml ||| try_assumption pc fml
      end.

    Lemma try_assumption_spec {Œ£} (pc : PathCondition Œ£) (fml : Formula Œ£) :
      BoolSpec (forall Œπ, instpc pc Œπ -> inst (A := Prop) fml Œπ) True (try_assumption pc fml).
    Proof.
      induction pc; cbn.
      - constructor; auto.
      - destruct (formula_eqb_spec a fml).
        + subst a. constructor. intros Œπ.
          rewrite inst_pathcondition_cons.
          intuition.
        + destruct IHpc.
          * constructor. intros Œπ.
            rewrite inst_pathcondition_cons.
            intuition.
          * constructor; auto.
    Qed.

    Definition solver {w0 : World} (fml : Formula w0) :
      option { w1 & MultiSub w0 w1 * List Formula w1 }%type :=
      match try_propagate fml with
      | Some (existT Œ£1 vareqs) => Some (existT Œ£1 (vareqs , nil))
      | None =>
        match try_solve_formula fml with
        | Some true => Some (existT w0 (multisub_id , nil))
        | Some false => None
        | None =>
          if try_assumption (wco w0) fml
          then Some (existT w0 (multisub_id , nil))
          else Some (existT w0 (multisub_id , (cons fml nil)))
        end
      end.

    Lemma inst_multisub_inst_sub_multi {w0 w1} (Œ∂01 : MultiSub w0 w1) (Œπ1 : SymInstance w1) :
      inst_multisub Œ∂01 (inst (wsub (wmultisub_sup Œ∂01)) Œπ1).
    Proof.
        induction Œ∂01; cbn - [subst]; auto.
        rewrite <- inst_sub_shift.
        rewrite <- ?inst_subst.
        rewrite <- inst_lookup.
        rewrite lookup_sub_comp.
        rewrite lookup_sub_single_eq.
        rewrite <- subst_sub_comp.
        rewrite <- sub_comp_assoc.
        rewrite sub_comp_shift_single.
        rewrite sub_comp_id_left.
        split; auto.
    Qed.

    Lemma solver_spec {w0 : World} (fml : Formula w0) :
      OptionSpec
        (fun '(existT Œ£1 (Œ∂, fmls)) =>
           forall Œπ0,
             instpc (wco w0) Œπ0 ->
             (inst (A:= Prop) fml Œπ0 -> inst_multisub Œ∂ Œπ0) /\
             (forall Œπ1,
                 Œπ0 = inst (wsub (wmultisub_sup Œ∂)) Œπ1 ->
                 inst fml Œπ0 <-> inst fmls Œπ1))
        (forall Œπ, instpc (wco w0) Œπ -> inst (A := Prop) fml Œπ -> False)
        (solver fml).
    Proof.
      unfold solver.
      destruct (try_propagate_spec fml) as [[Œ£1 Œ∂01]|].
      { constructor. intros Œπ0 Hpc. specialize (H Œπ0).
        split. intuition. intros Œπ1 ->.
        intuition. constructor. clear H. apply H1.
        apply inst_multisub_inst_sub_multi.
      }
      clear H.
      destruct (try_solve_formula_spec fml) as [b|].
      { destruct b.
        - constructor. intros Œπ0 Hpc. cbn. split; auto.
          intros ? HŒπ. rewrite inst_sub_id in HŒπ. subst Œπ1.
          specialize (H Œπ0). intuition. constructor.
        - constructor. unfold is_true in H. intuition.
      }
      clear H.
      destruct (try_assumption_spec (wco w0) fml).
      { constructor. intros Œπ0 Hpc. specialize (H Œπ0).
        cbn. split; auto. intros Œπ1 ->.
        rewrite inst_sub_id in *. intuition.
        constructor.
      }
      clear H.
      { constructor. intros Œπ0 Hpc. split.
        cbn; auto. intros Œπ1 ->.
        rewrite inst_pathcondition_cons.
        cbn. rewrite inst_sub_id.
        intuition. constructor.
      }
    Qed.

  End Solver.

  Module Path.

    Inductive SPath (A : TYPE) (w : World) : Type :=
    | pure (a: A w)
    | angelic_binary (o1 o2 : SPath A w)
    | demonic_binary (o1 o2 : SPath A w)
    | error (msg : Message w)
    | block
    | assertk (fml : Formula w) (msg : Message w) (k : SPath A (wformula w fml))
    | assumek (fml : Formula w) (k : SPath A (wformula w fml))
    (* Don't use these two directly. Instead, use the HOAS versions 'angelic' *)
    (* and 'demonic' that will freshen names. *)
    | angelicv b (k : SPath A (wsnoc w b))
    | demonicv b (k : SPath A (wsnoc w b))
    | assert_vareq
        x œÉ (xIn : x::œÉ ‚àà w)
        (t : Term (w - (x::œÉ)) œÉ)
        (msg : Message (w - (x::œÉ)))
        (k : SPath A (wsubst w x t))
    | assume_vareq
        x œÉ (xIn : (x,œÉ) ‚àà w)
        (t : Term (w - (x,œÉ)) œÉ)
        (k : SPath A (wsubst w x t))
    | debug
        {BT B} {subB : Subst BT}
        {instB : Inst BT B}
        {occB: OccursCheck BT}
        (b : BT w) (k : SPath A w).

    Global Arguments pure {_ _} _.
    Global Arguments error {_ _} _.
    Global Arguments block {_ _}.
    Global Arguments assertk {_ _} fml msg k.
    Global Arguments assumek {_ _} fml k.
    Global Arguments angelicv {_ _} _ _.
    Global Arguments demonicv {_ _} _ _.
    Global Arguments assert_vareq {_ _} x {_ _} t msg k.
    Global Arguments assume_vareq {_ _} x {_ _} t k.

    Definition demonic_close {A} :
      forall Œ£, SPath A {| wctx := Œ£; wco := nil |} -> SPath A wnil :=
      fix close Œ£ :=
        match Œ£ with
        | ctx_nil      => fun k => k
        | ctx_snoc Œ£ b => fun k => close Œ£ (@demonicv A (@MkWorld Œ£ []) b k)
        end.

    Global Instance persistent_spath {A} `{Persistent A} : Persistent (SPath A) :=
      (* ‚ä¢ SPath A -> ‚ñ°(SPath A) := *)
       fix pers {w0} p {w1} œâ01 {struct p} : SPath A w1 :=
         match p with
         | pure a               => pure (persist a œâ01)
         | angelic_binary p1 p2 => angelic_binary (pers p1 œâ01) (pers p2 œâ01)
         | demonic_binary p1 p2 => demonic_binary (pers p1 œâ01) (pers p2 œâ01)
         | error msg            => error (subst msg (wsub œâ01))
         | block                => block
         | assertk fml msg p0   =>
             assertk (subst fml (wsub œâ01)) (subst msg (wsub œâ01))
               (pers p0 (wacc_formula œâ01 fml))
         | assumek fml p        =>
             assumek (subst fml (wsub œâ01))
               (pers p (wacc_formula œâ01 fml))
         | angelicv b p0        => angelicv b (pers p0 (wacc_snoc œâ01 b))
         | demonicv b p0        => demonicv b (pers p0 (wacc_snoc œâ01 b))
         | assert_vareq x t msg p =>
           let Œ∂ := subst (sub_shift _) (wsub œâ01) in
           assertk
             (formula_eq (env_lookup (wsub œâ01) _) (subst t Œ∂))
             (subst msg Œ∂)
             (pers p
                (MkAcc (MkWorld (subst (wco w0) (sub_single _ t)))
                   (MkWorld
                      (cons (formula_eq (env_lookup (wsub œâ01) _) (subst t Œ∂))
                         (wco w1))) Œ∂))
         | @assume_vareq _ _ x œÉ xIn t p =>
           let Œ∂ := subst (sub_shift _) (wsub œâ01) in
           assumek
             (formula_eq (env_lookup (wsub œâ01) xIn) (subst t Œ∂))
             (pers p
                (MkAcc (MkWorld (subst (wco w0) (sub_single xIn t)))
                   (MkWorld
                      (cons (formula_eq (env_lookup (wsub œâ01) xIn) (subst t Œ∂))
                         (wco w1))) Œ∂))
         | debug d p => debug (subst d (wsub œâ01)) (pers p œâ01)
         end.

    (* Fixpoint occurs_check_spath {A} `{OccursCheck A} {w : World} {x} (xIn : x ‚àà w) (o : SPath A w) : *)
    (*   option (SPath A (w - x)) := *)
    (*   match o with *)
    (*   | pure a => option_map pure (occurs_check xIn a) *)
    (*   | angelic_binary o1 o2 => *)
    (*     option_ap (option_map (angelic_binary (Œ£ := Œ£ - x)) (occurs_check_spath xIn o1)) (occurs_check_spath xIn o2) *)
    (*   | demonic_binary o1 o2 => *)
    (*     option_ap (option_map (demonic_binary (Œ£ := Œ£ - x)) (occurs_check_spath xIn o1)) (occurs_check_spath xIn o2) *)
    (*   | error msg => option_map error (occurs_check xIn msg) *)
    (*   | block => Some block *)
    (*   | assertk P msg o => *)
    (*     option_ap (option_ap (option_map (assertk (Œ£ := Œ£ - x)) (occurs_check xIn P)) (occurs_check xIn msg)) (occurs_check_spath xIn o) *)
    (*   | assumek P o => option_ap (option_map (assumek (Œ£ := Œ£ - x)) (occurs_check xIn P)) (occurs_check_spath xIn o) *)
    (*   | angelicv b o => option_map (angelicv b) (occurs_check_spath (inctx_succ xIn) o) *)
    (*   | demonicv b o => option_map (demonicv b) (occurs_check_spath (inctx_succ xIn) o) *)
    (*   | @assert_vareq _ _ y œÉ yIn t msg o => *)
    (*     match occurs_check_view yIn xIn with *)
    (*     | Same _ => None *)
    (*     | @Diff _ _ _ _ x xIn => *)
    (*       option_ap *)
    (*         (option_ap *)
    (*            (option_map *)
    (*               (fun (t' : Term (Œ£ - (y :: œÉ) - x) œÉ) (msg' : Message (Œ£ - (y :: œÉ) - x)) (o' : SPath A (Œ£ - (y :: œÉ) - x)) => *)
    (*                  let e := swap_remove yIn xIn in *)
    (*                  assert_vareq *)
    (*                    y *)
    (*                    (eq_rect (Œ£ - (y :: œÉ) - x) (fun Œ£ => Term Œ£ œÉ) t' (Œ£ - x - (y :: œÉ)) e) *)
    (*                    (eq_rect (Œ£ - (y :: œÉ) - x) Message msg' (Œ£ - x - (y :: œÉ)) e) *)
    (*                    (eq_rect (Œ£ - (y :: œÉ) - x) (SPath A) o' (Œ£ - x - (y :: œÉ)) e)) *)
    (*               (occurs_check xIn t)) *)
    (*            (occurs_check xIn msg)) *)
    (*         (occurs_check_spath xIn o) *)
    (*     end *)
    (*   | @assume_vareq _ _ y œÉ yIn t o => *)
    (*     match occurs_check_view yIn xIn with *)
    (*     | Same _ => Some o *)
    (*     | @Diff _ _ _ _ x xIn => *)
    (*       option_ap *)
    (*         (option_map *)
    (*            (fun (t' : Term (Œ£ - (y :: œÉ) - x) œÉ) (o' : SPath A (Œ£ - (y :: œÉ) - x)) => *)
    (*               let e := swap_remove yIn xIn in *)
    (*               assume_vareq *)
    (*                 y *)
    (*                 (eq_rect (Œ£ - (y :: œÉ) - x) (fun Œ£ => Term Œ£ œÉ) t' (Œ£ - x - (y :: œÉ)) e) *)
    (*                 (eq_rect (Œ£ - (y :: œÉ) - x) (SPath A) o' (Œ£ - x - (y :: œÉ)) e)) *)
    (*            (occurs_check xIn t)) *)
    (*         (occurs_check_spath xIn o) *)
    (*     end *)
    (*   | debug b o => option_ap (option_map (debug (Œ£ := Œ£ - x)) (occurs_check xIn b)) (occurs_check_spath xIn o) *)
    (*   end. *)

    Fixpoint inst_spath {AT A} `{Inst AT A} {w} (o : SPath AT w) (Œπ : SymInstance w) : Outcome A :=
      match o with
      | pure a               => outcome_pure (inst a Œπ)
      | angelic_binary o1 o2 => outcome_angelic_binary (inst_spath o1 Œπ) (inst_spath o2 Œπ)
      | demonic_binary o1 o2 => outcome_demonic_binary (inst_spath o1 Œπ) (inst_spath o2 Œπ)
      | error msg            => outcome_fail msg
      | block                => outcome_block
      | assertk fml msg o    => outcome_assertk
                                  (Obligation msg fml Œπ)
                                  (inst_spath o Œπ)
      | assumek fml o        => outcome_assumek (inst fml Œπ) (inst_spath o Œπ)
      | angelicv b k         => outcome_angelic (fun v : Lit (snd b) => inst_spath k (env_snoc Œπ b v))
      | demonicv b k         => outcome_demonic (fun v : Lit (snd b) => inst_spath k (env_snoc Œπ b v))
      | @assert_vareq _ _ x œÉ xIn t msg k =>
        let Œπ' := env_remove' _ Œπ xIn in
        outcome_assertk
          (env_lookup Œπ xIn = inst t Œπ')
          (inst_spath k Œπ')
      | @assume_vareq _ _ x œÉ xIn t k =>
        let Œπ' := env_remove' _ Œπ xIn in
        outcome_assumek
          (env_lookup Œπ xIn = inst t Œπ')
          (inst_spath k Œπ')
      | debug d k            => outcome_debug (inst d Œπ) (inst_spath k Œπ)
      end.

    Definition mapping AT BT : TYPE :=
      ‚ñ°(AT -> BT).
    Definition arrow AT BT : TYPE :=
      ‚ñ°(AT -> SPath BT).

    (* Definition arrow_dcl {ET E AT A BT B} `{Subst ET, Subst BT, Inst ET E, Inst AT A, Inst BT B} {Œ£} (f : arrow ET AT BT Œ£) : Prop := *)
    (*   forall Œ£1 Œ£2 Œ∂1 Œ∂2 Œ∂12 a1 a2, *)
    (*     (forall Œπ1 Œπ2, Œπ1 = inst Œπ2 Œ∂12 -> inst Œπ1 a1 = inst Œπ2 a2) -> *)
    (*     geq (subst Œ∂12 (f Œ£1 Œ∂1 a1)) (f Œ£2 Œ∂2 a2). *)

    Definition angelic {AT} (x : option ùë∫) œÉ :
      ‚ä¢ ‚ñ°(STerm œÉ -> SPath AT) -> SPath AT :=
      fun w k =>
        let y := fresh w x in
        angelicv
          (y :: œÉ) (k (wsnoc w (y :: œÉ)) wsnoc_sup (@term_var _ y œÉ inctx_zero)).
    Global Arguments angelic {_} x œÉ [w] k.

    Definition demonic {AT} (x : option ùë∫) œÉ :
      ‚ä¢ ‚ñ°(STerm œÉ -> SPath AT) -> SPath AT :=
      fun w k =>
        let y := fresh w x in
        demonicv
          (y :: œÉ) (k (wsnoc w (y :: œÉ)) wsnoc_sup (@term_var _ y œÉ inctx_zero)).
    Global Arguments demonic {_} x œÉ [w] k.

    Definition angelic_freshen_ctx {AT} {N : Set} (n : N -> ùë∫) :
      ‚ä¢ ‚àÄ Œî : NCtx N Ty, ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SPath AT) -> SPath AT :=
      fix freshen {w} Œî {struct Œî} :=
        match Œî with
        | ctx_nil             => fun k => T k env_nil
        | ctx_snoc Œî (x :: œÉ) =>
          fun k =>
            angelic (Some (n x)) œÉ (fun w1 œâ01 t =>
              freshen Œî (fun w2 œâ12 EŒî =>
                k w2 (wtrans œâ01 œâ12) (EŒî ‚ñ∫ (x :: œÉ ‚Ü¶ subst t œâ12))))
        end.
    Global Arguments angelic_freshen_ctx {_ _} n [w] Œî : rename.

    Definition demonic_freshen_ctx {AT} {N : Set} (n : N -> ùë∫) :
      ‚ä¢ ‚àÄ Œî : NCtx N Ty, ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SPath AT) -> SPath AT :=
      fix freshen {w} Œî {struct Œî} :=
        match Œî with
        | ctx_nil             => fun k => T k env_nil
        | ctx_snoc Œî (x :: œÉ) =>
          fun k =>
            demonic (Some (n x)) œÉ (fun w1 œâ01 t =>
              freshen Œî (fun w2 œâ12 EŒî =>
                k w2 (wtrans œâ01 œâ12) (EŒî ‚ñ∫ (x :: œÉ ‚Ü¶ subst t œâ12))))
        end.
    Global Arguments demonic_freshen_ctx {_ _} n [w] Œî : rename.

    Definition map {A B} :
      ‚ä¢ ‚ñ°(A -> B) -> SPath A -> SPath B :=
      fix map {w} f p :=
        match p with
        | pure a                 => pure (T f a)
        | angelic_binary p1 p2   => angelic_binary (map f p1) (map f p2)
        | demonic_binary p1 p2   => demonic_binary (map f p1) (map f p2)
        | error msg              => error msg
        | block                  => block
        | assertk fml msg p      => assertk fml msg (map (four f wformula_sup) p)
        | assumek fml p          => assumek fml (map (four f wformula_sup) p)
        | angelicv b p           => angelicv b (map (four f wsnoc_sup) p)
        | demonicv b p           => demonicv b (map (four f wsnoc_sup) p)
        | assert_vareq x t msg p => assert_vareq x t msg (map (four f wsubst_sup) p)
        | assume_vareq x t p     => assume_vareq x t (map (four f wsubst_sup) p)
        | debug d p              => debug d (map f p)
        end.

    Definition bind {A B} :
      ‚ä¢ SPath A -> ‚ñ°(A -> SPath B) -> SPath B :=
      fix bind {w} ma f :=
        match ma with
        | pure a                 => T f a
        | angelic_binary p1 p2   => angelic_binary (bind p1 f) (bind p2 f)
        | demonic_binary p1 p2   => demonic_binary (bind p1 f) (bind p2 f)
        | error msg              => error msg
        | block                  => block
        | assertk fml msg p      => assertk fml msg (bind p (four f wformula_sup))
        | assumek fml p          => assumek fml (bind p (four f wformula_sup))
        | angelicv b p           => angelicv b (bind p (four f wsnoc_sup))
        | demonicv b p           => demonicv b (bind p (four f wsnoc_sup))
        | assert_vareq x t msg p => assert_vareq x t msg (bind p (four f wsubst_sup))
        | assume_vareq x t p     => assume_vareq x t (bind p (four f wsubst_sup))
        | debug d p              => debug d (bind p f)
        end.

    Definition assume_formulas_without_solver {A} {w : World} :
      forall (fmls : List Formula w), SPath A (wformulas w fmls) -> SPath A w :=
      match w with
      | @MkWorld Œ£ pc =>
        (fix assumes pc (fmls : List Formula Œ£) {struct fmls} :
           SPath A {| wctx := Œ£; wco := app fmls pc |} ->
           SPath A {| wctx := Œ£; wco := pc |} :=
           match fmls with
           | nil => fun p => p
           | cons fml fmls =>
             fun p =>
               assumes pc fmls
                 (assumek (w:= {| wctx := Œ£; wco := app fmls pc |}) fml p)
           end) pc
      end.
    Global Arguments assume_formulas_without_solver {_ _} fmls p.

    Definition assert_formulas_without_solver {A} :
      ‚ä¢ Message -> List Formula -> ‚ñ°(SPath A) -> SPath A :=
      fix asserts w msg fmls k :=
        match fmls with
        | nil           => T k
        | cons fml fmls =>
          assertk fml msg (asserts (wformula w fml) msg fmls (four k wformula_sup))
        end.

    Fixpoint assume_multisub {AT w1 w2} (ŒΩ : MultiSub w1 w2) :
      SPath AT w2 -> SPath AT w1.
    Proof.
      destruct ŒΩ; intros o; cbn in o.
      - exact o.
      - apply (@assume_vareq AT w1 x œÉ xIn t).
        eapply assume_multisub.
        apply ŒΩ.
        apply o.
    Defined.

    Fixpoint assert_multisub {AT} {w1 w2 : World} (msg : Message w1) (Œ∂ : MultiSub w1 w2) : (Message w2 -> SPath AT w2) -> SPath AT w1.
    Proof.
      destruct Œ∂; intros o; cbn in o.
      - apply o. apply msg.
      - apply (@assert_vareq AT w1 x œÉ xIn t).
        apply (subst msg (sub_single xIn t)).
        refine (assert_multisub AT (wsubst w1 x t) _ (subst msg (sub_single xIn t)) Œ∂ o).
    Defined.

    Definition assume_formulak {A} :
      ‚ä¢ Formula -> ‚ñ°(SPath A) -> SPath A :=
      fun w0 fml k =>
        match solver fml with
        | Some (existT w1 (ŒΩ , fmls)) =>
          (* Assume variable equalities and the residual constraints *)
          assume_multisub ŒΩ
            (assume_formulas_without_solver fmls
               (four k (wmultisub_sup ŒΩ) (wformulas_sup w1 fmls)))
        | None =>
          (* The formula is inconsistent with the path constraints. *)
          block
        end.

    Definition assert_formulak {A} :
      ‚ä¢ Message -> Formula -> ‚ñ°(SPath A) -> SPath A :=
      fun w0 msg fml k =>
        match solver fml with
        | Some (existT w1 (ŒΩ , fmls)) =>
          (* Assert variable equalities and the residual constraints *)
          assert_multisub msg ŒΩ
            (fun msg' => assert_formulas_without_solver msg' fmls (four k (wmultisub_sup ŒΩ)))
        | None =>
          (* The formula is inconsistent. *)
          error msg
        end.

    Definition assume_formula :
      ‚ä¢ Formula -> SPath Unit :=
      fun w fml =>
        assume_formulak fml (fun _ _ => pure tt).

    Definition assume_formulas :
      ‚ä¢ List Formula -> SPath Unit :=
      fix assume_formulas {w0} fmls {struct fmls} :=
        match fmls with
        | nil => pure tt
        | cons fml fmls =>
          bind
            (assume_formulas fmls)
            (fun w1 œâ01 _ => assume_formula (subst fml œâ01))
        end.

    Definition assume_formulask {A} :
      ‚ä¢ List Formula -> ‚ñ°(SPath A) -> ‚ñ°(SPath A) :=
      fun w0 =>
        fix assumes fmls k :=
        match fmls with
        | nil           => k
        | cons fml fmls =>
          fun w1 œâ01 =>
            assume_formulak
              (subst fml œâ01)
              (four (assumes fmls k) œâ01)
        end.

    Definition assert_formula :
      ‚ä¢ Message -> Formula -> SPath Unit :=
      fun w msg fml =>
        assert_formulak msg fml (fun _ _ => pure tt).

    Definition assert_formulas :
      ‚ä¢ Message -> List Formula -> SPath Unit :=
      fix assert_formulas {w0} msg fmls {struct fmls} :=
        match fmls with
        | nil => pure tt
        | cons fml fmls =>
          bind
            (assert_formulas msg fmls)
            (fun w1 œâ01 _ => assert_formula (subst msg œâ01) (subst fml œâ01))
        end.

    Definition assert_formulask {A} :
      ‚ä¢ Message -> List Formula -> ‚ñ°(SPath A) -> ‚ñ°(SPath A) :=
      fun w0 msg =>
        fix asserts fmls k :=
        match fmls with
        | nil           => k
        | cons fml fmls =>
          fun w1 œâ01 =>
            assert_formulak
              (subst msg œâ01)
              (subst fml œâ01)
              (four (asserts fmls k) œâ01)
        end.

    Definition angelic_list {A} :
      ‚ä¢ Message -> List A -> SPath A :=
      fun w msg =>
        fix rec xs :=
        match xs with
        | nil        => error msg
        | cons x nil => pure x
        | cons x xs  => angelic_binary (pure x) (rec xs)
        end.

    Definition angelic_listk {A B : TYPE} :
      ‚ä¢ Message -> (A -> SPath B) -> WList A -> SPath B :=
      fun w msg k =>
        fix rec xs :=
        match xs with
        | nil        => error msg
        | cons x nil => k x
        | cons x xs  => angelic_binary (k x) (rec xs)
        end.

    Definition demonic_list {A} :
      ‚ä¢ WList A -> SPath A :=
      fun w =>
        fix rec xs :=
        match xs with
        | nil        => block
        | cons x nil => pure x
        | cons x xs  => demonic_binary (pure x) (rec xs)
        end.

    Definition demonic_listk {A B} :
      ‚ä¢ (A -> SPath B) -> WList A -> SPath B :=
      fun w k =>
        fix rec xs :=
        match xs with
        | nil        => block
        | cons x nil => k x
        | cons x xs  => demonic_binary (k x) (rec xs)
        end.

    Definition angelic_finite {A} F `{finite.Finite F} :
      ‚ä¢ Message -> (‚åúF‚åù -> SPath A) -> SPath A :=
      fun w msg k => angelic_listk msg k (finite.enum F).

    Definition demonic_finite {A} F `{finite.Finite F} :
      ‚ä¢ (‚åúF‚åù -> SPath A) -> SPath A :=
      fun w k => demonic_listk k (finite.enum F).

    Definition angelic_match_bool {A} :
      ‚ä¢ Message -> STerm ty_bool -> ‚ñ°(SPath A) -> ‚ñ°(SPath A) -> SPath A :=
      fun w0 msg t pt pf =>
        match term_get_lit t with
        | Some true => T pt
        | Some false => T pf
        | None =>
          angelic_binary
            (bind
               (assert_formula msg (formula_bool t))
               (fun w1 œâ01 _ => pt w1 œâ01))
            (bind
               (assert_formula msg (formula_bool (term_not t)))
               (fun w1 œâ01 _ => pf w1 œâ01))
        end.

    Definition demonic_match_bool {A} :
      ‚ä¢ STerm ty_bool -> ‚ñ°(SPath A) -> ‚ñ°(SPath A) -> SPath A :=
      fun w0 t pt pf =>
        match term_get_lit t with
        | Some true => T pt
        | Some false => T pf
        | None =>
          demonic_binary
            (assume_formulak (formula_bool t) pt)
            (assume_formulak (formula_bool (term_not t)) pf)
        end.

    Definition angelic_match_enum {AT E} :
      ‚ä¢ Message -> STerm (ty_enum E) -> (‚åúLit (ty_enum E)‚åù -> ‚ñ°(SPath AT)) -> SPath AT :=
      fun w msg t k =>
        match term_get_lit t with
        | Some v => T (k v)
        | None => angelic_finite
                    msg (fun v => assert_formulak msg (formula_eq t (term_enum E v)) (k v))
        end.

    Definition demonic_match_enum {AT E} :
      ‚ä¢ STerm (ty_enum E) -> (‚åúLit (ty_enum E)‚åù -> ‚ñ°(SPath AT)) -> SPath AT :=
      fun w t k =>
        match term_get_lit t with
        | Some v => T (k v)
        | None => demonic_finite
                    (fun v => assume_formulak (formula_eq t (term_enum E v)) (k v))
        end.

    Definition angelic_match_list {AT} (x y : option ùë∫) (œÉ : Ty) :
      ‚ä¢ Message -> STerm (ty_list œÉ) -> ‚ñ°(SPath AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SPath AT) -> SPath AT :=
      fun w0 msg t knil kcons =>
        angelic_binary (assert_formulak msg (formula_eq (term_lit (ty_list œÉ) []) t) knil)
          (angelic x œÉ
             (fun w1 œâ01 (th : Term w1 œÉ) =>
              angelic y (ty_list œÉ)
                (fun w2 œâ12 (tt : Term w2 (ty_list œÉ)) =>
                 assert_formulak (subst msg (wtrans œâ01 œâ12))
                   (formula_eq (term_binop binop_cons (subst th œâ12) tt) (subst t (wtrans œâ01 œâ12)))
                   (fun w3 œâ23 =>
                    four kcons (wtrans œâ01 œâ12) œâ23 (subst th (wtrans œâ12 œâ23)) (subst tt œâ23))))).

    Definition demonic_match_list {AT} (x y : option ùë∫) (œÉ : Ty) :
      ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SPath AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SPath AT) -> SPath AT :=
      fun w0 t knil kcons =>
        demonic_binary (assume_formulak (formula_eq (term_lit (ty_list œÉ) []) t) knil)
          (demonic x œÉ
             (fun w1 œâ01 (th : Term w1 œÉ) =>
              demonic y (ty_list œÉ)
                (fun w2 œâ12 (tt : Term w2 (ty_list œÉ)) =>
                 assume_formulak
                   (formula_eq (term_binop binop_cons (subst th œâ12) tt) (subst t (wtrans œâ01 œâ12)))
                   (fun w3 œâ23 =>
                    four kcons (wtrans œâ01 œâ12) œâ23 (subst th (wtrans œâ12 œâ23)) (subst tt œâ23))))).

    Definition angelic_match_sum' {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SPath AT) -> ‚ñ°(STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 msg t kinl kinr =>
        angelic_binary
          (angelic x œÉ
             (fun w1 œâ01 (tœÉ : Term w1 œÉ) =>
              assert_formulak (subst msg œâ01) (formula_eq (term_inl tœÉ) (subst t œâ01))
                (fun w2 œâ12 =>
                   four kinl œâ01 œâ12 (subst tœÉ œâ12))))
          (angelic y œÑ
             (fun w1 œâ01 (tœÑ : Term w1 œÑ) =>
              assert_formulak (subst msg œâ01) (formula_eq (term_inr tœÑ) (subst t œâ01))
                (fun w2 œâ12 =>
                   four kinr œâ01 œâ12 (subst tœÑ œâ12)))).

    Definition angelic_match_sum {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SPath AT) -> ‚ñ°(STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 msg t kinl kinr =>
        match term_get_sum t with
        | Some (inl tœÉ) => T kinl tœÉ
        | Some (inr tœÑ) => T kinr tœÑ
        | None => angelic_match_sum' x y msg t kinl kinr
        end.

    Definition demonic_match_sum' {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SPath AT) -> ‚ñ°(STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 t kinl kinr =>
        demonic_binary
          (demonic x œÉ
             (fun w1 œâ01 (tœÉ : Term w1 œÉ) =>
              assume_formulak (formula_eq (term_inl tœÉ) (subst t œâ01))
                (fun w2 œâ12 =>
                   four kinl œâ01 œâ12 (subst tœÉ œâ12))))
          (demonic y œÑ
             (fun w1 œâ01 (tœÑ : Term w1 œÑ) =>
              assume_formulak (formula_eq (term_inr tœÑ) (subst t œâ01))
                (fun w2 œâ12 =>
                   four kinr œâ01 œâ12 (subst tœÑ œâ12)))).

    Definition demonic_match_sum {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SPath AT) -> ‚ñ°(STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 t kinl kinr =>
        match term_get_sum t with
        | Some (inl tœÉ) => T kinl tœÉ
        | Some (inr tœÑ) => T kinr tœÑ
        | None => demonic_match_sum' x y t kinl kinr
        end.

    Definition angelic_match_pair' {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 msg t k =>
        angelic x œÉ
          (fun w1 œâ01 (tœÉ : Term w1 œÉ) =>
           angelic y œÑ
             (fun w2 œâ12 (tœÑ : Term w2 œÑ) =>
              assert_formulak (subst msg (wtrans œâ01 œâ12)) (formula_eq (term_binop binop_pair (subst tœÉ œâ12) tœÑ) (subst t (wtrans œâ01 œâ12)))
                (fun w3 œâ23 =>
                 four k (wtrans œâ01 œâ12) œâ23 (subst tœÉ (wtrans œâ12 œâ23)) (subst tœÑ œâ23)))).

    Definition angelic_match_pair {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 msg t k =>
        match term_get_pair t with
        | Some (tœÉ,tœÑ) => T k tœÉ tœÑ
        | None => angelic_match_pair' x y msg t k
        end.

    Definition demonic_match_pair' {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 t k =>
        demonic x œÉ
          (fun w1 œâ01 (tœÉ : Term w1 œÉ) =>
           demonic y œÑ
             (fun w2 œâ12 (tœÑ : Term w2 œÑ) =>
              assume_formulak (formula_eq (term_binop binop_pair (subst tœÉ œâ12) tœÑ) (subst t (wtrans œâ01 œâ12)))
                (fun w3 œâ23 =>
                 four k (wtrans œâ01 œâ12) œâ23 (subst tœÉ (wtrans œâ12 œâ23)) (subst tœÑ œâ23)))).

    Definition demonic_match_pair {AT} (x : option ùë∫) (œÉ : Ty) (y : option ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SPath AT) -> SPath AT :=
      fun w0 t k =>
        match term_get_pair t with
        | Some (tœÉ,tœÑ) => T k tœÉ tœÑ
        | None => demonic_match_pair' x y t k
        end.

    Definition angelic_match_record' {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
      ‚ä¢ Message -> STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 msg t k.
      apply (angelic_freshen_ctx n Œî).
      intros w1 œâ01 ts.
      apply assert_formulak.
      apply (subst msg œâ01).
      apply (formula_eq (subst t œâ01)).
      apply (term_record R (record_pattern_match_env_reverse p ts)).
      intros w2 œâ12.
      apply (k w2 (wtrans œâ01 œâ12) (subst ts œâ12)).
    Defined.

    Definition angelic_match_record {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
      ‚ä¢ Message -> STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 msg t k.
      destruct (term_get_record t).
      - apply (T k).
        apply (record_pattern_match_env p n0).
      - apply (angelic_match_record' n p msg t k).
    Defined.

    Definition demonic_match_record' {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
      ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 t k.
      apply (demonic_freshen_ctx n Œî).
      intros w1 œâ01 ts.
      apply assume_formulak.
      apply (formula_eq (subst t œâ01)).
      apply (term_record R (record_pattern_match_env_reverse p ts)).
      intros w2 œâ12.
      apply (k w2 (wtrans œâ01 œâ12) (subst ts œâ12)).
    Defined.

    Definition demonic_match_record {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
      ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 t k.
      destruct (term_get_record t).
      - apply (T k).
        apply (record_pattern_match_env p n0).
      - apply (demonic_match_record' n p t k).
    Defined.

    Definition angelic_match_tuple' {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
      ‚ä¢ Message -> STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 msg t k.
      apply (angelic_freshen_ctx n Œî).
      intros w1 œâ01 ts.
      apply assert_formulak.
      apply (subst msg œâ01).
      apply (formula_eq (subst t œâ01)).
      apply (term_tuple (tuple_pattern_match_env_reverse p ts)).
      intros w2 œâ12.
      apply (k w2 (wtrans œâ01 œâ12) (subst ts œâ12)).
    Defined.

    Definition angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
      ‚ä¢ Message -> STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 msg t k.
      destruct (term_get_tuple t).
      - apply (T k).
        apply (tuple_pattern_match_env p e).
      - apply (angelic_match_tuple' n p msg t k).
    Defined.

    Definition demonic_match_tuple' {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
      ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 t k.
      apply (demonic_freshen_ctx n Œî).
      intros w1 œâ01 ts.
      apply assume_formulak.
      apply (formula_eq (subst t œâ01)).
      apply (term_tuple (tuple_pattern_match_env_reverse p ts)).
      intros w2 œâ12.
      apply (k w2 (wtrans œâ01 œâ12) (subst ts œâ12)).
    Defined.

    Definition demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
      ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT.
    Proof.
      intros w0 t k.
      destruct (term_get_tuple t).
      - apply (T k).
        apply (tuple_pattern_match_env p e).
      - apply (demonic_match_tuple' n p t k).
    Defined.

    (* TODO: move to Syntax *)
    Definition pattern_match_env_reverse {N : Set} {Œ£ : LCtx} {œÉ : Ty} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) :
      NamedEnv (Term Œ£) Œî -> Term Œ£ œÉ :=
      match p with
      | pat_var x    => fun Ex => match snocView Ex with isSnoc _ t => t end
      | pat_unit     => fun _ => term_lit ty_unit tt
      | pat_pair x y => fun Exy => match snocView Exy with
                                     isSnoc Ex ty =>
                                     match snocView Ex with
                                       isSnoc _ tx => term_binop binop_pair tx ty
                                     end
                                   end
      | pat_tuple p  => fun EŒî => term_tuple (tuple_pattern_match_env_reverse p EŒî)
      | pat_record p => fun EŒî => term_record _ (record_pattern_match_env_reverse p EŒî)
      end.

    Definition angelic_match_pattern {N : Set} (n : N -> ùë∫) {AT œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) :
      ‚ä¢ Message -> STerm œÉ -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT :=
      fun w0 msg t k =>
        angelic_freshen_ctx n Œî
          (fun w1 œâ01 (ts : (fun Œ£ : LCtx => NamedEnv (Term Œ£) Œî) w1) =>
           assert_formulak (subst msg œâ01) (formula_eq (subst t œâ01) (pattern_match_env_reverse p ts))
             (fun w2 œâ12 => k w2 (wtrans œâ01 œâ12) (subst ts œâ12))).

    Definition demonic_match_pattern {N : Set} (n : N -> ùë∫) {AT œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) :
      ‚ä¢ STerm œÉ -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> SPath AT) -> SPath AT :=
      fun w0 t k =>
        demonic_freshen_ctx n Œî
          (fun w1 œâ01 (ts : (fun Œ£ : LCtx => NamedEnv (Term Œ£) Œî) w1) =>
           assume_formulak (formula_eq (subst t œâ01) (pattern_match_env_reverse p ts))
             (fun w2 œâ12 => k w2 (wtrans œâ01 œâ12) (subst ts œâ12))).

    Definition angelic_match_union' {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty}
      (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
      ‚ä¢ Message -> STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> SPath AT)) -> SPath AT :=
      fun w0 msg t k =>
        angelic_finite msg
          (fun K : ùëºùë≤ U =>
           angelic None (ùëºùë≤_Ty K)
             (fun w1 œâ01 (t__field : Term w1 (ùëºùë≤_Ty K)) =>
              assert_formulak (subst msg œâ01) (formula_eq (term_union U K t__field) (subst t œâ01))
                (fun w2 œâ12 =>
                 let œâ02 := wtrans œâ01 œâ12 in
                 angelic_match_pattern n (p K) (subst msg œâ02) (subst t__field œâ12) (four (k K) œâ02)))).

    Definition angelic_match_union {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty}
      (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
      ‚ä¢ Message -> STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> SPath AT)) -> SPath AT :=
      fun w0 msg t k =>
        match term_get_union t with
        | Some (existT K t__field) => angelic_match_pattern n (p K) msg t__field (k K)
        | None => angelic_match_union' n p msg t k
        end.

    Definition demonic_match_union' {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty}
      (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
      ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> SPath AT)) -> SPath AT :=
      fun w0 t k =>
        demonic_finite
          (fun K : ùëºùë≤ U =>
           demonic None (ùëºùë≤_Ty K)
             (fun w1 œâ01 (t__field : Term w1 (ùëºùë≤_Ty K)) =>
              assume_formulak (formula_eq (term_union U K t__field) (subst t œâ01))
                (fun w2 œâ12 =>
                 demonic_match_pattern n (p K) (subst t__field œâ12) (four (k K) (wtrans œâ01 œâ12))))).

    Definition demonic_match_union {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty}
      (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
      ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> SPath AT)) -> SPath AT :=
      fun w0 t k =>
        match term_get_union t with
        | Some (existT K t__field) => demonic_match_pattern n (p K) t__field (k K)
        | None => demonic_match_union' n p t k
        end.

    Definition wp {AT A} `{Inst AT A} :
      (* ‚ä¢ SPath AT -> ‚åúA -> Prop‚åù -> SymInstance -> PROP *)
      forall w (o : SPath AT w) (POST : A -> Prop) (Œπ : SymInstance w), Prop :=
      fix wp {w} o POST Œπ : Prop :=
      match o return Prop with
      | pure a                            => POST (inst a Œπ)
      | angelic_binary o1 o2              => (wp o1 POST Œπ) \/ (wp o2 POST Œπ)
      | demonic_binary o1 o2              => (wp o1 POST Œπ) /\ (wp o2 POST Œπ)
      | error msg                         => Error msg
      | block                             => True
      | assertk fml msg o                 => inst fml Œπ /\ wp o POST Œπ
      | assumek fml o                     => inst (A := Prop) fml Œπ -> wp o POST Œπ
      | angelicv b k                      => exists (v : Lit (snd b)),
                                             wp k POST (env_snoc Œπ b v)
      | demonicv b k                      => forall (v : Lit (snd b)),
                                             wp k POST (env_snoc Œπ b v)
      | @assert_vareq _ _ x œÉ xIn t msg k => let Œπ' := env_remove' _ Œπ xIn in
                                             env_lookup Œπ xIn = inst t Œπ' /\
                                             wp k POST Œπ'
      | @assume_vareq _ _ x œÉ xIn t k     => let Œπ' := env_remove' _ Œπ xIn in
                                             env_lookup Œπ xIn = inst t Œπ' ->
                                             wp k POST Œπ'
      | debug d k                         => Debug (inst d Œπ) (wp k POST Œπ)
      end%type.

    Definition wp' {AT A} `{Inst AT A} :
      ‚ä¢ SPath AT -> ‚åúA -> Prop‚åù -> SymInstance -> PROP :=
      fun w o POST Œπ => outcome_satisfy (inst_spath o Œπ) POST.

    Lemma wp_wp' {AT A} `{Inst AT A} {w}
      (o : SPath AT w) (POST : A -> Prop) (Œπ : SymInstance w) :
      wp o POST Œπ <-> wp' o POST Œπ.
    Proof.
      unfold wp'.
      induction o; cbn; auto.
      - specialize (IHo1 Œπ). specialize (IHo2 Œπ). intuition.
      - specialize (IHo1 Œπ). specialize (IHo2 Œπ). intuition.
      - split; intros [].
      - specialize (IHo Œπ). intuition.
        constructor; auto.
      - specialize (IHo Œπ). intuition.
      - split; intros [v HYP]; exists v;
          specialize (IHo (env_snoc Œπ b v)); intuition.
      - split; intros HYP v; specialize (HYP v);
          specialize (IHo (env_snoc Œπ b v)); intuition.
      - specialize (IHo (env_remove' (x :: œÉ) Œπ xIn)).
        intuition.
      - specialize (IHo (env_remove' (x :: œÉ) Œπ xIn)).
        intuition.
      - split; intros [HYP]; constructor; revert HYP; apply IHo.
    Qed.

    Lemma wp_monotonic {AT A} `{Inst AT A} {w}
      (o : SPath AT w) (P Q : A -> Prop) (PQ : forall a, P a -> Q a)
      (Œπ : SymInstance w) :
      wp o P Œπ ->
      wp o Q Œπ.
    Proof.
      intros HP. rewrite wp_wp' in *.
      unfold wp' in *. revert HP.
      now apply outcome_satisfy_monotonic.
    Qed.

    Lemma wp_equiv {AT A} `{Inst AT A} {w}
      (o : SPath AT w) (P Q : A -> Prop) (PQ : forall a, P a <-> Q a)
      (Œπ : SymInstance w) :
      wp o P Œπ <->
      wp o Q Œπ.
    Proof. split; apply wp_monotonic; intuition. Qed.

    Global Instance proper_wp {AT A} `{Inst AT A} {w} (o : SPath AT w) :
      Proper
        (pointwise_relation A iff ==> eq ==> iff)
        (wp o).
    Proof.
      unfold Proper, respectful, pointwise_relation, Basics.impl.
      intros P Q PQ Œπ1 Œπ2 ->; split; apply wp_monotonic; intuition.
    Qed.

    Notation instpc Œπ pc := (@inst _ _ instantiate_pathcondition _ Œπ pc).

    Definition mapping_dcl {AT A BT B} `{Inst AT A, Inst BT B} :
      ‚ä¢ mapping AT BT -> PROP :=
      fun w0 f =>
        forall w1 (œâ01 : w0 ‚äí w1)
               w2 (œâ02 : w0 ‚äí w2)
               (œâ12 : w1 ‚äí w2) (a1 : AT w1) (a2 : AT w2) ,
        forall Œπ1 Œπ2,
          Œπ1 = inst (T := Sub _) œâ12 Œπ2 ->
          inst (T := Sub _) œâ01 Œπ1 = inst (T := Sub _) œâ02 Œπ2 ->
          inst a1 Œπ1 = inst a2 Œπ2 ->
          inst (f w1 œâ01 a1) Œπ1 = inst (f w2 œâ02 a2) Œπ2.

    Lemma mapping_dcl_four {AT A BT B} `{Inst AT A, Inst BT B} {w0}
      (f : mapping AT BT w0) (f_dcl : mapping_dcl f) :
      forall w1 (œâ01 : w0 ‚äí w1),
        mapping_dcl (four f œâ01).
    Proof.
      unfold mapping_dcl. intros * HŒπ HŒ∂ Ha.
      eapply f_dcl; eauto. unfold wtrans; cbn.
      rewrite ?inst_subst. intuition.
    Qed.

    (* Lemma mapping_dcl_four_wk1 {AT A BT B} `{Inst AT A, Inst BT B} {Œ£0} pc0 (b : ùë∫ * Ty) *)
    (*   (f : mapping AT BT Œ£0) (f_dcl : mapping_dcl pc0 f) : *)
    (*   mapping_dcl (subst pc0 sub_wk1) (four_wk1 pc0 f b). *)
    (* Proof. *)
    (*   unfold mapping_dcl. intros * HŒπ HŒ∂ Ha. *)
    (*   unfold four_wk1. rewrite <- ?sub_comp_wk1_tail. *)
    (*   eapply f_dcl; eauto. rewrite ?inst_subst. *)
    (*   intuition. *)
    (* Qed. *)

    Definition dcl {AT A} `{Inst AT A} :
      ‚ä¢ ‚ñ°(SPath AT) -> PROP :=
      fun w0 p =>
        forall
          (P Q : A -> Prop) (PQ : forall a, P a -> Q a)
          w1 (œâ01 : w0 ‚äí w1)
          w2 (œâ02 : w0 ‚äí w2)
          (œâ12 : w1 ‚äí w2),
        forall Œπ1 Œπ2,
          Œπ1 = inst (T := Sub _) œâ12 Œπ2 ->
          instpc (wco w1) Œπ1 ->
          instpc (wco w2) Œπ2 ->
          inst (T := Sub _) œâ01 Œπ1 = inst (T := Sub _) œâ02 Œπ2 ->
          wp (p w1 œâ01) P Œπ1 ->
          wp (p w2 œâ02) Q Œπ2.

    Definition arrow_dcl {AT A BT B} `{Inst AT A, Inst BT B} {w0} (f : arrow AT BT w0) : Prop :=
      forall
        w1 (œâ01 : w0 ‚äí w1)
        w2 (œâ02 : w0 ‚äí w2)
        (œâ12 : w1 ‚äí w2) (a1 : AT w1) (a2 : AT w2)
        (P Q : B -> Prop) (PQ : forall b, P b -> Q b),
       forall (Œπ1 : SymInstance w1) (Œπ2 : SymInstance w2),
         Œπ1 = inst (T := Sub _) œâ12 Œπ2 ->
         instpc (wco w1) Œπ1 ->
         instpc (wco w2) Œπ2 ->
         inst (T := Sub _) œâ01 Œπ1 = inst (T := Sub _) œâ02 Œπ2 ->
         inst a1 Œπ1 = inst a2 Œπ2 ->
         wp (f w1 œâ01 a1) P Œπ1 ->
         wp (f w2 œâ02 a2) Q Œπ2.

    Lemma arrow_dcl_equiv {AT A BT B} `{Inst AT A, Inst BT B} {w0} (f : arrow AT BT w0) (f_dcl : arrow_dcl f) :
      forall
        w1 (œâ01 : w0 ‚äí w1)
        w2 (œâ02 : w0 ‚äí w2)
        (œâ12 : w1 ‚äí w2) (œâ21 : w2 ‚äí w1)
        (a1 : AT w1) (a2 : AT w2)
        (P Q : B -> Prop) (PQ : forall b, P b <-> Q b),
       forall (Œπ1 : SymInstance w1) (Œπ2 : SymInstance w2),
         Œπ1 = inst (T := Sub _) œâ12 Œπ2 ->
         Œπ2 = inst (T := Sub _) œâ21 Œπ1 ->
         instpc (wco w1) Œπ1 ->
         instpc (wco w2) Œπ2 ->
         inst (T := Sub _) œâ01 Œπ1 = inst (T := Sub _) œâ02 Œπ2 ->
         inst a1 Œπ1 = inst a2 Œπ2 ->
         wp (f w1 œâ01 a1) P Œπ1 <->
         wp (f w2 œâ02 a2) Q Œπ2.
    Proof.
      intros; split; eapply f_dcl; eauto; intuition.
    Qed.

    Lemma arrow_dcl_four {AT A BT B} `{Inst AT A, Inst BT B} {w0} (f : arrow AT BT w0) (f_dcl : arrow_dcl f) :
      forall w1 (œâ01 : w0 ‚äí w1),
        arrow_dcl (four f œâ01).
    Proof.
      unfold arrow_dcl. intros * PQ * HŒπ Hpc1 Hpc2 HŒ∂ Ha.
      eapply f_dcl; eauto. unfold wtrans; cbn.
      rewrite ?inst_subst. intuition.
    Qed.

    (* Lemma arrow_dcl_four_wk1 {AT A BT B} `{Inst AT A, Inst BT B} {Œ£0} pc0 (f : arrow AT BT Œ£0) (f_dcl : arrow_dcl pc0 f) : *)
    (*   forall (b : ùë∫ * Ty), *)
    (*     arrow_dcl (subst pc0 sub_wk1) (four_wk1 pc0 f b). *)
    (* Proof. *)
    (*   unfold arrow_dcl. intros * PQ * HŒπ Hpc1 Hpc2 HŒ∂ Ha. *)
    (*   unfold four_wk1. rewrite <- ?sub_comp_wk1_tail. *)
    (*   eapply f_dcl; eauto. rewrite ?inst_subst. *)
    (*   intuition. *)
    (* Qed. *)

    Hint Resolve mapping_dcl_four : dcl.
    (* Hint Resolve mapping_dcl_four_wk1 : dcl. *)
    Hint Resolve arrow_dcl_four : dcl.
    (* Hint Resolve arrow_dcl_four_wk1 : dcl. *)

    Lemma wp_persist {AT A} `{InstLaws AT A} {w1 w2 : World} (œâ12 : w1 ‚äí w2)
          (o : SPath AT w1) (POST : A -> Prop) (Œπ2 : SymInstance w2) :
      wp (persist (A := SPath AT) o œâ12) POST Œπ2 <->
      wp o POST (inst (T := Sub _) œâ12 Œπ2).
    Proof.
      revert w2 œâ12 Œπ2.
      induction o; cbn; intros.
      - unfold persist, persist_subst.
        now rewrite inst_subst.
      - now rewrite IHo1, IHo2.
      - now rewrite IHo1, IHo2.
      - split; intros [].
      - reflexivity.
      - now rewrite IHo, inst_subst.
      - now rewrite IHo, inst_subst.
      - split; intros [v HYP]; exists v; revert HYP;
          rewrite IHo; unfold wacc_snoc, wsnoc;
            cbn [wctx wsub]; now rewrite inst_sub_up1.
      - split; intros HYP v; specialize (HYP v); revert HYP;
          rewrite IHo; unfold wacc_snoc, wsnoc;
            cbn [wctx wsub]; now rewrite inst_sub_up1.
      - rewrite IHo; unfold wsubst; cbn [wctx wsub].
        now rewrite ?inst_subst, ?inst_sub_shift, <- inst_lookup.
      - rewrite IHo; unfold wsubst; cbn [wctx wsub].
        now rewrite ?inst_subst, ?inst_sub_shift, <- inst_lookup.
      - split; intros [HYP]; constructor; revert HYP; apply IHo.
    Qed.

    Definition safe {AT} :
      (* ‚ä¢ SPath AT -> SymInstance -> PROP := *)
      forall w (o : SPath AT w) (Œπ : SymInstance w), Prop :=
      fix safe {w} o Œπ :=
        match o with
        | pure a => True
        | angelic_binary o1 o2 => safe o1 Œπ \/ safe o2 Œπ
        | demonic_binary o1 o2 => safe o1 Œπ /\ safe o2 Œπ
        | error msg => False
        | block => True
        | assertk fml msg o =>
          Obligation msg fml Œπ /\ safe o Œπ
        | assumek fml o => (inst fml Œπ : Prop) -> safe o Œπ
        | angelicv b k => exists v, safe k (env_snoc Œπ b v)
        | demonicv b k => forall v, safe k (env_snoc Œπ b v)
        | @assert_vareq _ _ x œÉ xIn t msg k =>
          (let Œ∂ := sub_shift xIn in
          Obligation (subst msg Œ∂) (formula_eq (term_var x) (subst t Œ∂))) Œπ /\
          (let Œπ' := env_remove (x,œÉ) Œπ xIn in
          safe k Œπ')
        | @assume_vareq _ _ x œÉ xIn t k =>
          let Œπ' := env_remove (x,œÉ) Œπ xIn in
          env_lookup Œπ xIn = inst t Œπ' ->
          safe k Œπ'
        | debug d k => Debug (inst d Œπ) (safe k Œπ)
        end%type.
    Global Arguments safe {_ w} o Œπ.

    Lemma and_iff_compat_l' (A B C : Prop) :
      (A -> B <-> C) <-> (A /\ B <-> A /\ C).
    Proof. intuition. Qed.

    Lemma imp_iff_compat_l' (A B C : Prop) :
      (A -> B <-> C) <-> ((A -> B) <-> (A -> C)).
    Proof. intuition. Qed.

    Global Instance proper_debug {B} : Proper (eq ==> iff ==> iff) (@Debug B).
    Proof.
      unfold Proper, respectful.
      intros ? ? -> P Q PQ.
      split; intros []; constructor; intuition.
    Qed.

    Ltac wsimpl :=
      repeat
        (try change (wctx (wsnoc ?w ?b)) with (ctx_snoc (wctx w) b);
         try change (wsub (@wred_sup ?w ?b ?t)) with (sub_snoc (sub_id (wctx w)) b t);
         try change (wco (wsnoc ?w ?b)) with (subst (wco w) (sub_wk1 (b:=b)));
         try change (wsub (@wrefl ?w)) with (sub_id (wctx w));
         try change (wsub (@wsnoc_sup ?w ?b)) with (@sub_wk1 (wctx w) b);
         try change (wctx (wformula ?w ?fml)) with (wctx w);
         try change (wsub (wtrans ?œâ1 ?œâ2)) with (subst (wsub œâ1) (wsub œâ2));
         try change (wsub (@wformula_sup ?w ?fml)) with (sub_id (wctx w));
         try change (wco (wformula ?w ?fml)) with (cons fml (wco w));
         try change (wco (@wsubst ?w _ _ ?xIn ?t)) with (subst (wco w) (sub_single xIn t));
         try change (wctx (@wsubst ?w _ _ ?xIn ?t)) with (ctx_remove xIn);
         try change (wsub (@wsubst_sup ?w _ _ ?xIn ?t)) with (sub_single xIn t);
         rewrite <- ?sub_comp_wk1_tail, ?inst_subst, ?subst_sub_id,
           ?inst_sub_id, ?inst_sub_wk1, ?inst_sub_snoc,
           ?inst_lift, ?inst_sub_single, ?inst_pathcondition_cons;
         repeat
           match goal with
           | |- Debug _ _ <-> Debug _ _ => apply proper_debug
           | |- (?A /\ ?B) <-> (?A /\ ?C) => apply and_iff_compat_l'; intro
           | |- (?A -> ?B) <-> (?A -> ?C) => apply imp_iff_compat_l'; intro
           | |- (exists x : ?X, _) <-> (exists y : ?X, _) => apply base.exist_proper; intro
           | |- (forall x : ?X, _) <-> (forall y : ?X, _) => apply base.forall_proper; intro
           | |- wp ?m _ ?Œπ -> wp ?m _ ?Œπ => apply wp_monotonic; intro
           | |- wp ?m _ ?Œπ <-> wp ?m _ ?Œπ => apply wp_equiv; intro
           | |- ?w ‚äí ?w => apply wrefl
           | |- ?POST (@inst _ _ _ ?Œ£1 ?x1 ?Œπ1) <-> ?POST (@inst _ _ _ ?Œ£2 ?x2 ?Œπ2) =>
             assert (@inst _ _ _ Œ£1 x1 Œπ1 = @inst _ _ _ Œ£2 x2 Œπ2) as ->; auto
           | |- ?POST (?inst _ _ _ ?Œ£1 ?x1 ?Œπ1) -> ?POST (@inst _ _ _ ?Œ£2 ?x2 ?Œπ2) =>
             assert (@inst _ _ _ Œ£1 x1 Œπ1 = @inst _ _ _ Œ£2 x2 Œπ2) as ->; auto
           | Hdcl : mapping_dcl ?f |-
             inst (?f ?w ?œâ _) _ = inst (?f ?w ?œâ _) _ =>
             apply (Hdcl w œâ w œâ wrefl)
           | Hdcl : mapping_dcl ?f |-
             inst (?f ?w0 wrefl _) _ = inst (?f ?w1 ?œâ01 _) _ =>
             apply (Hdcl w0 wrefl w1 œâ01 œâ01)
           | Hdcl : mapping_dcl ?f |-
             inst (?f ?w1 ?œâ01 _) _ = inst (?f ?w0 wrefl _) _ =>
             symmetry; apply (Hdcl w0 wrefl w1 œâ01 œâ01)
           | Hdcl : arrow_dcl ?f |-
             wp (?f ?w ?œâ _) _ _ -> wp (?f ?w ?œâ _) _ _  =>
             apply (Hdcl w œâ w œâ wrefl)
           end).

    Lemma wp_angelic {AT A} `{InstLaws AT A} {w0} {x : option ùë∫} {œÉ : Ty}
          (k : arrow (STerm œÉ) AT w0) (k_dcl : arrow_dcl k)
          (POST : A -> Prop) (Œπ0 : SymInstance w0) :
      instpc (wco w0) Œπ0 ->
      wp (angelic x œÉ k) POST Œπ0 <->
      exists v : Lit œÉ, wp (k _ wrefl (lift v)) POST Œπ0.
    Proof.
      cbn. split; intros [v Hwp]; exists v; revert Hwp.
      - apply k_dcl with (wred_sup (fresh w0 x :: œÉ) (lift v)); wsimpl; auto.
      - apply k_dcl with wsnoc_sup; wsimpl; auto.
    Qed.

    Lemma wp_map {AT A BT B} `{InstLaws AT A, Inst BT B} {w0} (ma : SPath AT w0)
      (f : mapping AT BT w0) (f_dcl : mapping_dcl f) :
      forall POST (Œπ : SymInstance w0) (Hpc : instpc (wco w0) Œπ),
        wp (map f ma) POST Œπ <->
        wp ma (fun a => POST (inst (T f (lift a)) Œπ)) Œπ.
    Proof with wsimpl; auto with dcl; unfold four; wsimpl; auto.
      intros POST Œπ Hpc. unfold T.
      induction ma; cbn; wsimpl; auto.
      - unfold T. wsimpl; auto.
      - rewrite IHma1, IHma2...
      - rewrite IHma1, IHma2...
      - rewrite IHma...
      - rewrite IHma...
      - rewrite IHma...
      - rewrite IHma...
      - rewrite IHma...
      - rewrite IHma...
    Qed.

    Lemma wp_bind {AT A BT B} `{InstLaws AT A, Inst BT B} {w0} (ma : SPath AT w0)
      (f : arrow AT BT w0) (f_dcl : arrow_dcl f) :
      forall POST (Œπ : SymInstance w0) (Hpc : instpc (wco w0) Œπ),
        wp (bind ma f) POST Œπ <->
        wp ma (fun a => wp (T f (lift a)) POST Œπ) Œπ.
    Proof with wsimpl; auto with dcl; unfold four; wsimpl; auto.
      intros POST Œπ Hpc. unfold T.
      induction ma; cbn; wsimpl; auto.
      - unfold T. split; wsimpl; auto.
      - rewrite IHma1, IHma2...
      - rewrite IHma1, IHma2...
      - rewrite IHma...
        eapply arrow_dcl_equiv; wsimpl; auto.
        Unshelve.
        3: apply wformula_sub.
        3: apply wformula_sup.
        unfold wformula_sub. cbn. wsimpl; auto.
        unfold wformula_sup. cbn. wsimpl; auto.
      - rewrite IHma...
        eapply arrow_dcl_equiv; wsimpl; auto.
        Unshelve.
        3: apply wformula_sub.
        3: apply wformula_sup.
        unfold wformula_sub. cbn. wsimpl; auto.
        unfold wformula_sup. cbn. wsimpl; auto.
    Admitted.

    Lemma wp_assume_multisub {AT A} `{InstLaws AT A} {w0 w1} (Œ∂ : MultiSub w0 w1)
      (o : SPath AT w1) (P : A -> Prop) (Œπ0 : SymInstance w0) :
      wp (assume_multisub Œ∂ o) P Œπ0 <->
      (inst_multisub Œ∂ Œπ0 -> wp o P (inst (sub_multishift Œ∂) Œπ0)).
    Proof.
      induction Œ∂; cbn in *.
      - rewrite inst_sub_id. intuition.
      - rewrite IHŒ∂. clear IHŒ∂.
        rewrite <- inst_sub_shift.
        rewrite inst_subst.
        intuition.
    Qed.

    Lemma wp_assume_formulas_without_solver {AT A} `{InstLaws AT A} {w0 : World}
      (fmls : List Formula w0) (o : SPath AT (wformulas w0 fmls))
      (P : A -> Prop) (Œπ0 : SymInstance w0) :
      wp (assume_formulas_without_solver fmls o) P Œπ0 <->
      (instpc fmls Œπ0 -> wp o P Œπ0).
    Proof.
      destruct w0. unfold assume_formulas_without_solver. cbn in fmls.
      induction fmls; unfold wformulas; cbn in *.
      - split; auto. intros HYP. apply HYP. constructor.
      - rewrite IHfmls, inst_pathcondition_cons. cbn.
        intuition.
    Qed.

    Definition angelic_binary_prune {AT} :
      ‚ä¢ SPath AT -> SPath AT -> SPath AT :=
      fun w o1 o2 =>
        match o1 , o2 with
        | block   , _       => block
        | _       , block   => block
        | error _ , _       => o2
        | _       , error _ => o1
        | _       , _       => angelic_binary o1 o2
        end.

    Definition demonic_binary_prune {AT} :
      ‚ä¢ SPath AT -> SPath AT -> SPath AT :=
      fun w o1 o2 =>
        match o1 , o2 with
        | block   , _       => o2
        | _       , block   => o1
        | error s , _       => error s
        | _       , error s => error s
        | _       , _       => demonic_binary o1 o2
        end.

    Definition assertk_prune {AT} :
      (* ‚ä¢ Formula -> Message -> SPath AT -> SPath AT. *)
      forall {w : World} (fml : Formula w), Message w -> SPath AT (wformula w fml) -> SPath AT w :=
      fun w fml msg o =>
        match o with
        | error s => @error AT w s
        | _       => assertk fml msg o
        end.
    Global Arguments assertk_prune {AT w} fml msg p.

    Definition assumek_prune {AT} :
      (* ‚ä¢ Formula -> SPath AT -> SPath AT := *)
      forall {w : World} (fml : Formula w), SPath AT (wformula w fml) -> SPath AT w :=
      fun w fml o =>
        match o with
        | block => block
        | _     => assumek fml o
        end.
    Global Arguments assumek_prune {AT w} fml p.

    Definition angelicv_prune {AT} (* `{OccursCheck AT} *) b :
      ‚ä¢ Snoc (SPath AT) b -> SPath AT :=
      fun w o => angelicv b o.
        (* This is not good *)
        (* match o with *)
        (* | fail s => fail s *)
        (* | _           => angelicv b o *)
        (* end. *)

    Definition demonicv_prune {AT} `{OccursCheck AT} b :
      ‚ä¢ Snoc (SPath AT) b -> SPath AT :=
      fun w o => demonicv b o.
        (* match @occurs_check_spath AT _ (Œ£ ‚ñª b) b inctx_zero o with *)
        (* | Some o => o *)
        (* | None   => demonicv b o *)
        (* end. *)

    Definition assert_vareq_prune {AT w}
      {x œÉ} {xIn : (x,œÉ) ‚àà wctx w} (t : Term (w - (x,œÉ)) œÉ)
      (msg : Message (w - (x,œÉ))) (k : SPath AT (wsubst w x t)) : SPath AT w :=
      match k with
      (* | fail s => fail s *)
      | _          => assert_vareq x t msg k
      end.
    Global Arguments assert_vareq_prune {AT w} x {œÉ xIn} t msg k.

    Definition assume_vareq_prune {AT w}
      {x œÉ} {xIn : (x,œÉ) ‚àà wctx w} (t : Term (w - (x,œÉ)) œÉ) (k : SPath AT (wsubst w x t)) : SPath AT w :=
      match k with
      | block => block
      | _          => assume_vareq x t k
      end.
    Global Arguments assume_vareq_prune {AT w} x {œÉ xIn} t k.

    Definition prune {AT} `{OccursCheck AT} :
      ‚ä¢ SPath AT -> SPath AT :=
      fix prune {w} o :=
        match o with
        | pure a => pure a
        | error msg => error msg
        | block => block
        | angelic_binary o1 o2 =>
          angelic_binary_prune (prune o1) (prune o2)
        | demonic_binary o1 o2 =>
          demonic_binary_prune (prune o1) (prune o2)
        | assertk fml msg o =>
          assertk_prune fml msg (prune o)
        | assumek fml o =>
          assumek_prune fml (prune o)
        | angelicv b o =>
          angelicv_prune (prune o)
        | demonicv b o =>
          demonicv_prune (prune o)
        | assert_vareq x t msg k =>
          assert_vareq_prune x t msg (prune k)
        | assume_vareq x t k =>
          assume_vareq_prune x t (prune k)
        | debug d k =>
          debug d (prune k)
        end.

    Definition ok {AT} `{OccursCheck AT} :
      ‚ä¢ SPath AT -> ‚åúbool‚åù :=
      fun w o =>
        match prune o with
        | block => true
        | _     => false
        end.

    Definition run {AT A} `{OccursCheck AT, Inst AT A} :
      ‚ä¢ SPath AT -> SymInstance -> ‚åúoption A‚åù :=
      fun w o Œπ =>
        match prune o with
        | pure a => Some (inst a Œπ)
        | _      => None
        end.

  End Path.

  Import Path.

  Section VerificationConditions.

    Inductive VerificationCondition {AT} (p : SPath AT wnil) : Prop :=
    | vc (P : safe p env_nil).

  End VerificationConditions.

  Section SMutatorResult.

    (* Local Set Primitive Projections. *)
    Local Set Maximal Implicit Insertion.

    Record SMutResult (Œì : PCtx) (A : TYPE) (w : World) : Type :=
      MkSMutResult {
          smutres_value : A w;
          smutres_store : SStore Œì w;
          smutres_heap  : SHeap w;
        }.

    Global Arguments MkSMutResult {_ _ _} _ _ _.

   (*  Global Instance SubstSMutResult {Œì A} `{Subst A} : Subst (SMutResult Œì A). *)
   (*  Proof. *)
   (*    intros Œ£1 [a Œ¥ h] Œ£2 Œ∂. *)
   (*    constructor. *)
   (*    apply (subst a Œ∂). *)
   (*    apply (subst Œ¥ Œ∂). *)
   (*    apply (subst h Œ∂). *)
   (* Defined. *)

   (*  Global Instance SubstLawsSMutResult {Œì A} `{SubstLaws A} : SubstLaws (SMutResult Œì A). *)
   (*  Proof. *)
   (*    constructor. *)
   (*    - intros ? []; cbn; now rewrite ?subst_sub_id. *)
   (*    - intros ? ? ? ? ? []; cbn; now rewrite ?subst_sub_comp. *)
   (*  Qed. *)

  End SMutatorResult.

  Section Configuration.

    Record Config : Type :=
      MkConfig
        { config_debug_function : forall Œî œÑ, ùë≠ Œî œÑ -> bool;
        }.

    Definition default_config : Config :=
      {| config_debug_function _ _ f := false;
      |}.

  End Configuration.

  Section SMutator.

    Definition SMut (Œì1 Œì2 : PCtx) (A : TYPE) : TYPE :=
      SStore Œì1 -> SHeap -> SPath (SMutResult Œì2 A).
    Bind Scope smut_scope with SMut.

    Definition smut_pure {Œì} {A : TYPE} :
      ‚ä¢ A -> SMut Œì Œì A.
      intros w0 a Œ¥ h.
      apply Path.pure.
      constructor.
      apply a.
      apply Œ¥.
      apply h.
    Defined.

    Definition smut_bpure {Œì} {A : TYPE}  :
      ‚ä¢ ‚ñ°(A -> SMut Œì Œì A).
      intros w0 w1 œâ01 a Œ¥ h.
      apply Path.pure.
      constructor.
      apply a.
      apply Œ¥.
      apply h.
    Defined.
    Global Arguments smut_bpure {_ _ _}.

    Definition smut_bind {Œì1 Œì2 Œì3 A B} :
      ‚ä¢ SMut Œì1 Œì2 A -> ‚ñ°(A -> SMut Œì2 Œì3 B) -> SMut Œì1 Œì3 B :=
      fun w0 ma f Œ¥1 h1 =>
        bind (ma Œ¥1 h1)
          (fun w1 œâ01 '(MkSMutResult a1 Œ¥1 h1) =>
             f w1 œâ01 a1 Œ¥1 h1).

    Definition smut_bbind {Œì1 Œì2 Œì3 A B} :
      ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(A -> SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 B).
      intros w0 ma f w1 œâ01 Œ¥1 h1.
      apply (bind (ma w1 œâ01 Œ¥1 h1)).
      intros w2 œâ12 [a2 Œ¥2 h2].
      apply (four f œâ01). auto. auto. auto. auto.
    Defined.

    (* Definition smut_strength {Œì1 Œì2 A B Œ£} `{Subst A, Subst B} (ma : SMut Œì1 Œì2 A Œ£) (b : B Œ£) : *)
    (*   SMut Œì1 Œì2 (fun Œ£ => A Œ£ * B Œ£)%type Œ£ := *)
    (*   smut_bind ma (fun _ Œ∂ a => smut_pure (a, subst b Œ∂)). *)

    Definition smut_bind_right {Œì1 Œì2 Œì3 A B} :
      ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 B).
      refine (fun w0 ma mb w1 œâ01 => smut_bind (ma w1 œâ01) _).
      refine (fun w2 œâ12 _ => mb w2 (wtrans œâ01 œâ12)).
    Defined.

    Definition smut_bind_left {Œì1 Œì2 Œì3 A B} `{Subst A} :
      ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 A).
    Proof.
      intros w0 ma mb.
      apply (smut_bbind ma).
      intros w1 œâ01 a1 Œ¥1 h1.
      apply (bind (mb w1 œâ01 Œ¥1 h1)).
      intros w2 œâ12 [_ Œ¥2 h2].
      apply (smut_pure).
      apply (subst a1 œâ12).
      auto.
      auto.
    Defined.

    (* Definition smut_map {Œì1 Œì2 A B} `{Subst A, Subst B} : *)
    (*   ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(A -> B) -> ‚ñ°(SMut Œì1 Œì2 B) := *)
    (*   fun w0 ma f Œ£1 Œ∂01 pc1 Œ¥1 h1 => *)
    (*     map pc1 *)
    (*       (fun Œ£2 Œ∂12 pc2 '(MkSMutResult a2 Œ¥2 h2) => *)
    (*          MkSMutResult (f Œ£2 (subst Œ∂01 Œ∂12) pc2 a2) Œ¥2 h2) *)
    (*        (ma Œ£1 Œ∂01 pc1 Œ¥1 h1). *)

    Definition smut_error {Œì1 Œì2 A D} (func : string) (msg : string) (data:D) :
      ‚ä¢ SMut Œì1 Œì2 A.
    Proof.
      intros w Œ¥ h.
      apply error.
      apply (@MkMessage _ func msg Œì1); auto.
      apply (wco w).
    Defined.
    Global Arguments smut_error {_ _ _ _} func msg data {w} _ _.

    Definition smut_block {Œì1 Œì2 A} :
      ‚ä¢ SMut Œì1 Œì2 A :=
      fun w Œ¥ h => block.

    Definition smut_angelic_binary {Œì1 Œì2 A} :
      ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì1 Œì2 A) :=
      fun w0 m1 m2 w1 œâ01 Œ¥1 h1 =>
      angelic_binary (m1 w1 œâ01 Œ¥1 h1) (m2 w1 œâ01 Œ¥1 h1).
    Definition smut_demonic_binary {Œì1 Œì2 A} :
      ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì1 Œì2 A) :=
      fun w0 m1 m2 w1 œâ01 Œ¥1 h1 =>
        demonic_binary (m1 w1 œâ01 Œ¥1 h1) (m2 w1 œâ01 Œ¥1 h1).

    Definition smut_angelic {AT Œì1 Œì2} (x : option ùë∫) œÉ :
      ‚ä¢ ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
      fun w0 k Œ¥0 h0 =>
        angelic x œÉ
          (fun w1 œâ01 t =>
           k w1 œâ01 t (subst Œ¥0 œâ01) (subst h0 œâ01)).
    Global Arguments smut_angelic {_ _ _} x œÉ {w} k.

    Definition smut_demonic {AT Œì1 Œì2} (x : option ùë∫) œÉ :
      ‚ä¢ ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
      fun w0 k Œ¥0 h0 =>
        demonic x œÉ
          (fun w1 œâ01 t =>
           k w1 œâ01 t (subst Œ¥0 œâ01) (subst h0 œâ01)).
    Global Arguments smut_demonic {_ _ _} x œÉ {w} k.

    Definition smut_debug {AT DT D} `{Subst DT, Inst DT D, OccursCheck DT} {Œì1 Œì2} :
      ‚ä¢ (SStore Œì1 -> SHeap -> DT) -> (SMut Œì1 Œì2 AT) -> (SMut Œì1 Œì2 AT) :=
      fun w0 d m Œ¥1 h1 =>
        debug (d Œ¥1 h1) (m Œ¥1 h1).

  End SMutator.
  Bind Scope smut_scope with SMut.

  Module SMutatorNotations.

    (* Notation "'‚®Ç' x .. y => F" := *)
    (*   (smut_demonic (fun x => .. (smut_demonic (fun y => F)) .. )) : smut_scope. *)

    (* Notation "'‚®Å' x .. y => F" := *)
    (*   (smut_angelic (fun x => .. (smut_angelic (fun y => F)) .. )) : smut_scope. *)

    Infix "‚äó" := smut_demonic_binary (at level 40, left associativity) : smut_scope.
    Infix "‚äï" := smut_angelic_binary (at level 50, left associativity) : smut_scope.

    Notation "x <- ma ;; mb" := (smut_bind ma (fun _ _ x => mb)) (at level 80, ma at level 90, mb at level 200, right associativity) : smut_scope.
    Notation "ma >>= f" := (smut_bind ma f) (at level 50, left associativity) : smut_scope.
    (* Notation "m1 ;; m2" := (smut_bind_right m1 m2) : smut_scope. *)

  End SMutatorNotations.
  Import SMutatorNotations.
  Local Open Scope smut_scope.

  (* Fixpoint smut_demonic_freshen_ctx {N : Set} {Œì Œ£0} (n : N -> ùë∫) (Œî : NCtx N Ty) : *)
  (*   SMut Œì Œì (fun Œ£ => NamedEnv (Term Œ£) Œî) Œ£0 := *)
  (*  match Œî  with *)
  (*  | Œµ            => smut_pure env_nil *)
  (*  | Œî ‚ñª (x :: œÉ) => *)
  (*      smut_demonic_freshen_ctx n Œî        >>= fun _ _ Œ¥Œî => *)
  (*      smut_demonic_termvar (Some (n x)) œÉ >>= fun _ Œ∂12 t => *)
  (*      smut_pure (subst Œ¥Œî Œ∂12 ‚ñ∫ (x :: œÉ ‚Ü¶ t)) *)
  (*  end. *)

  (* Add the provided formula to the path condition. *)
  Definition smut_assume_formula {Œì} :
    ‚ä¢ Formula -> SMut Œì Œì Unit :=
    fun w fml Œ¥ h =>
      assume_formulak fml (smut_bpure <*> persist tt <*> persist Œ¥ <*> persist h).

  Definition smut_box_assume_formula {Œì} :
    ‚ä¢ Formula -> ‚ñ°(SMut Œì Œì Unit).
  Proof.
    intros w0 fml w1 œâ01.
    apply smut_assume_formula.
    apply (subst fml œâ01).
  Defined.

  Definition smutk_assume_formula {A Œì1 Œì2} :
    ‚ä¢ Formula -> ‚ñ°(SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A :=
    fun w0 fml m Œ¥0 h0 =>
      assume_formulak fml (m <*> persist Œ¥0 <*> persist h0).

  Definition smut_assert_formula {Œì} :
    ‚ä¢ Formula -> SMut Œì Œì Unit :=
    fun w fml Œ¥ h =>
      assert_formulak
        {| msg_function        := "smut_assert_formula";
           msg_message         := "Proof obligation";
           msg_program_context := Œì;
           msg_pathcondition   := wco w;
           msg_localstore      := Œ¥;
           msg_heap            := h;
        |}
        fml
        (smut_bpure <*> persist tt <*> persist Œ¥ <*> persist h).

  Definition smutk_assert_formula {A Œì1 Œì2} :
    ‚ä¢ Formula -> ‚ñ°(SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A :=
    fun w0 fml m Œ¥0 h0 =>
      assert_formulak
        {| msg_function        := "smutk_assert_formula";
           msg_message         := "Proof obligation";
           msg_program_context := Œì1;
           msg_pathcondition   := wco w0;
           msg_localstore      := Œ¥0;
           msg_heap            := h0;
        |}
        fml
        (m <*> persist Œ¥0 <*> persist h0).

  Definition smut_box_assert_formula {Œì} :
    ‚ä¢ Formula -> ‚ñ°(SMut Œì Œì Unit).
  Proof.
    intros w0 fml w1 œâ01.
    apply smut_assert_formula.
    apply (subst fml œâ01).
  Defined.

  Section PatternMatching.

    Definition smut_angelic_match_bool {AT} {Œì1 Œì2} :
      ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t kt kf w1 œâ01 Œ¥1 h1 =>
        angelic_match_bool
          {| msg_function        := "smut_angelic_match_bool";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (four kt œâ01 <*> persist Œ¥1 <*> persist h1)
          (four kf œâ01 <*> persist Œ¥1 <*> persist h1).

    Definition smut_demonic_match_bool {AT} {Œì1 Œì2} :
      ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
      fun w0 t kt kf Œ¥0 h0 =>
        demonic_match_bool t
          (kt <*> persist Œ¥0 <*> persist h0)
          (kf <*> persist Œ¥0 <*> persist h0).

    Definition smutb_demonic_match_bool {AT} {Œì1 Œì2} :
      ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t kt kf =>
        smut_demonic_match_bool <$> persist__term t <*> four kt <*> four kf.

    Definition smut_angelic_match_enum {AT E} {Œì1 Œì2} :
      ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        angelic_match_enum
          {| msg_function        := "smut_angelic_match_enum";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun v => four (k v) œâ01 <*> persist Œ¥1 <*> persist h1).

    Definition smut_demonic_match_enum {AT E} {Œì1 Œì2} :
      ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT :=
      fun w0 t k Œ¥1 h1 =>
        demonic_match_enum t (fun v => k v <*> persist Œ¥1 <*> persist h1).

    Definition smutb_demonic_match_enum {AT E} {Œì1 Œì2} :
      ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k =>
        smut_demonic_match_enum
          <$> persist__term t
          <*> (fun (w1 : World) (œâ01 : w0 ‚äí w1) (EK : ùë¨ùë≤ E) => four (k EK) œâ01).

    Definition smut_angelic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t kinl kinr w1 œâ01 Œ¥1 h1 =>
        Path.angelic_match_sum
          (Some x) (Some y)
          {| msg_function        := "smut_angelic_match_sum";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun w2 œâ12 t' =>
             four kinl œâ01 œâ12 t' (subst Œ¥1 œâ12) (subst h1 œâ12))
          (fun w2 œâ12 t' =>
             four kinr œâ01 œâ12 t' (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_demonic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
    Proof.
      refine (fun w0 t kinl kinr Œ¥0 h0 => _).
      apply (Path.demonic_match_sum (Some x) (Some y) t).
      - intros w1 œâ01 t'. apply kinl; auto.
        apply (persist Œ¥0 œâ01).
        apply (persist h0 œâ01).
      - intros w1 œâ01 t'.
        apply kinr; auto.
        apply (persist Œ¥0 œâ01).
        apply (persist h0 œâ01).
    Defined.

    Definition smutb_demonic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t kinl kinr w1 œâ01 Œ¥1 h1 =>
        Path.demonic_match_sum
          (Some x) (Some y) (subst t œâ01)
          (fun w2 œâ12 t' =>
             four kinl œâ01 œâ12 t' (subst Œ¥1 œâ12) (subst h1 œâ12))
          (fun w2 œâ12 t' =>
             four kinr œâ01 œâ12 t' (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_angelic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
      ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t knil kcons w1 œâ01 Œ¥1 h1 =>
        angelic_match_list
          (Some x) (Some y)
          {| msg_function        := "smut_angelic_match_list";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) => four knil œâ01 œâ12 (subst Œ¥1 œâ12) (subst h1 œâ12))
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (th : Term w2 œÉ) (tt : Term w2 (ty_list œÉ)) =>
             four kcons œâ01 œâ12 th tt (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_demonic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
      ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t knil kcons w1 œâ01 Œ¥1 h1 =>
        demonic_match_list
          (Some x) (Some y) (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) => four knil œâ01 œâ12 (subst Œ¥1 œâ12) (subst h1 œâ12))
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (th : Term w2 œÉ) (tt : Term w2 (ty_list œÉ)) =>
             four kcons œâ01 œâ12 th tt (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_angelic_match_pair {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
      ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        angelic_match_pair
          (Some x) (Some y)
          {| msg_function        := "smut_angelic_match_pair";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (tl : Term w2 œÉ) (tr : Term w2 œÑ) =>
             four k œâ01 œâ12 tl tr (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smutb_demonic_match_pair {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
      ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        demonic_match_pair
          (Some x) (Some y) (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (tl : Term w2 œÉ) (tr : Term w2 œÑ) =>
             four k œâ01 œâ12 tl tr (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_angelic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
      ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        angelic_match_record
          n p
          {| msg_function        := "smut_angelic_match_record";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (ts : NamedEnv (Term w2) Œî) =>
             four k œâ01 œâ12 ts (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_demonic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
      ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        demonic_match_record
          n p (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (ts : NamedEnv (Term w2) Œî) =>
             four k œâ01 œâ12 ts (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
      ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        angelic_match_tuple
          n p
          {| msg_function        := "smut_angelic_match_tuple";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (ts : NamedEnv (Term w2) Œî) =>
             four k œâ01 œâ12 ts (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
      ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        demonic_match_tuple
          n p (subst t œâ01)
          (fun (w2 : World) (œâ12 : w1 ‚äí w2) (ts : NamedEnv (Term w2) Œî) =>
             four k œâ01 œâ12 ts (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_angelic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
      {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
      ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        angelic_match_union
          n p
          {| msg_function        := "smut_angelic_match_union";
             msg_message         := "pattern match assertion";
             msg_program_context := Œì1;
             msg_localstore      := Œ¥1;
             msg_heap            := h1;
             msg_pathcondition   := wco w1;
          |}
          (subst t œâ01)
          (fun (K : ùëºùë≤ U) (w2 : World) (œâ12 : w1 ‚äí w2) (ts : NamedEnv (Term w2) (Œî K)) =>
             four (k K) œâ01 œâ12 ts (subst Œ¥1 œâ12) (subst h1 œâ12)).

    Definition smut_demonic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
      {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
      ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
      fun w0 t k w1 œâ01 Œ¥1 h1 =>
        demonic_match_union
          n p (subst t œâ01)
          (fun (K : ùëºùë≤ U) (w2 : World) (œâ12 : w1 ‚äí w2) (ts : NamedEnv (Term w2) (Œî K)) =>
             four (k K) œâ01 œâ12 ts (subst Œ¥1 œâ12) (subst h1 œâ12)).

  End PatternMatching.

  Section State.

    Definition smut_state {Œì1 Œì2 A} :
      ‚ä¢ (SStore Œì1 -> SHeap -> SMutResult Œì2 A) -> SMut Œì1 Œì2 A :=
      fun w0 f Œ¥0 h0 =>
       pure (f Œ¥0 h0).

    Definition smut_bstate {Œì1 Œì2 A} :
      ‚ä¢ ‚ñ°(SStore Œì1 -> SHeap -> SMutResult Œì2 A) -> ‚ñ°(SMut Œì1 Œì2 A) :=
      fun w0 f w1 œâ01 Œ¥1 h1 =>
       pure (f w1 œâ01 Œ¥1 h1).

    Definition smut_get_local {Œì} : ‚ä¢ ‚ñ°(SMut Œì Œì (SStore Œì)) :=
      fun w0 =>
        smut_bstate (fun w1 œâ01 Œ¥1 h1 => MkSMutResult Œ¥1 Œ¥1 h1).
    (* Definition smut_put_local {Œì Œì' Œ£} (Œ¥' : SStore Œì' Œ£) : SMut Œì Œì' Unit Œ£ := *)
    (*   smut_state (fun _ Œ∂ _ h => MkSMutResult tt (subst Œ¥' Œ∂) h). *)

    Definition smutk_pop_local {A Œì1 Œì2 b} :
      ‚ä¢ SMut Œì1 Œì2 A -> SMut (Œì1 ‚ñª b) Œì2 A.
    Proof.
      intros w k Œ¥ h.
      apply k.
      apply (env_tail Œ¥).
      auto.
    Defined.

    Definition smutk_pops_local {A Œì1 Œì2 Œî} :
      ‚ä¢ SMut Œì1 Œì2 A -> SMut (Œì1 ‚ñª‚ñª Œî) Œì2 A.
    Proof.
      intros w k Œ¥ h.
      apply k.
      apply (env_drop Œî Œ¥).
      auto.
    Defined.

    Definition smutk_push_local {A Œì1 Œì2 x œÉ} :
      ‚ä¢ STerm œÉ -> SMut (Œì1 ‚ñª (x :: œÉ)) Œì2 A -> SMut Œì1 Œì2 A.
    Proof.
      intros w t k Œ¥ h.
      apply k.
      apply (env_snoc Œ¥ (x :: œÉ) t).
      auto.
    Defined.

    Definition smutk_pushs_local {A Œì1 Œì2 Œî} :
      ‚ä¢ SStore Œî -> SMut (Œì1 ‚ñª‚ñª Œî) Œì2 A -> SMut Œì1 Œì2 A.
    Proof.
      intros w Œ¥Œî k Œ¥ h.
      apply k.
      apply (env_cat Œ¥ Œ¥Œî).
      auto.
    Defined.

    (* Definition smut_pushpop {AT} `{Subst AT} {Œì1 Œì2 x œÉ Œ£} (t : Term Œ£ œÉ) (d : SMut (Œì1 ‚ñª (x :: œÉ)) (Œì2 ‚ñª (x :: œÉ)) AT Œ£) : *)
    (*   SMut Œì1 Œì2 AT Œ£ := *)
    (*   smut_push_local t ;; smut_bind_left d smut_pop_local. *)
    Definition smut_pushspops {AT} `{Subst AT} {Œì1 Œì2 Œî} :
      ‚ä¢ SStore Œî -> SMut (Œì1 ‚ñª‚ñª Œî) (Œì2 ‚ñª‚ñª Œî) AT -> SMut Œì1 Œì2 AT.
      intros w0 Œ¥Œî k.
      intros Œ¥0 h0.
      apply (bind (k (env_cat Œ¥0 Œ¥Œî) h0)).
      intros w1 œâ01 [a1 Œ¥1 h1].
      apply smut_pure.
      apply a1.
      apply (env_drop Œî Œ¥1).
      apply h1.
    Defined.
    (* Definition smut_get_heap {Œì Œ£} : SMut Œì Œì SHeap Œ£ := *)
    (*   smut_state (fun _ _ Œ¥ h => MkSMutResult h Œ¥ h). *)
    (* Definition smut_put_heap {Œì Œ£} (h : SHeap Œ£) : SMut Œì Œì Unit Œ£ := *)
    (*   smut_state (fun _ Œ∂ Œ¥ _ => MkSMutResult tt Œ¥ (subst h Œ∂)). *)
    Definition smut_eval_exp {Œì œÉ} (e : Exp Œì œÉ) :
      ‚ä¢ SMut Œì Œì (STerm œÉ).
      intros w Œ¥ h.
      apply smut_pure.
      apply (seval_exp Œ¥ e).
      auto.
      auto.
    Defined.
    Definition smut_eval_exps {Œì} {œÉs : PCtx} (es : NamedEnv (Exp Œì) œÉs) :
      ‚ä¢ SMut Œì Œì (SStore œÉs).
      intros w Œ¥ h.
      apply smut_pure.
      refine (env_map _ es).
      intros b. apply (seval_exp Œ¥).
      auto.
      auto.
    Defined.

    Definition smutk_eval_exp {A Œì1 Œì2 œÉ} (e : Exp Œì1 œÉ) :
      ‚ä¢ (STerm œÉ -> SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A.
    Proof.
      intros w k Œ¥ h.
      apply k.
      apply (seval_exp Œ¥ e).
      auto.
      auto.
    Defined.

    Definition smutk_eval_exps {A Œì1 Œì2} {œÉs : PCtx} (es : NamedEnv (Exp Œì1) œÉs) :
      ‚ä¢ (SStore œÉs -> SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A.
    Proof.
      intros w k Œ¥ h.
      apply k.
      refine (env_map _ es).
      intros b. apply (seval_exp Œ¥).
      auto.
      auto.
    Defined.

  End State.

  (* Definition smut_assert_formulas {Œì Œ£} (fmls : list (Formula Œ£)) : SMut Œì Œì Unit Œ£ := *)
  (*   fold_right (fun fml => smut_bind_right (smut_assert_formula fml)) (smut_pure tt) fmls. *)
  Definition smut_produce_chunk {Œì} :
    ‚ä¢ Chunk -> SMut Œì Œì Unit.
  Proof.
    intros w0 c Œ¥ h. apply smut_pure.
    constructor. apply Œ¥.
    apply (cons c h).
  Defined.

  Definition smutk_produce_chunk {Œì1 Œì2 A} :
    ‚ä¢ Chunk -> SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A.
  Proof.
    intros w0 c k Œ¥ h. apply k.
    apply Œ¥.
    apply (cons c h).
  Defined.

  Definition smut_consume_chunk {Œì} :
    ‚ä¢ Chunk -> ‚ñ°(SMut Œì Œì Unit) :=
    fun w0 c w1 œâ01 Œ¥1 h1 =>
      angelic_listk
        (A := fun w => Pair PathCondition SHeap w)
        {| msg_function := "smut_consume_chunk";
           msg_message := "Empty extraction";
           msg_program_context := Œì;
           msg_localstore := Œ¥1;
           msg_heap := h1;
           msg_pathcondition := wco w1
        |}
        (fun '(Œîpc,h1') =>
           assert_formulask
             (A := (fun Œ£ : World => SMutResult Œì Unit Œ£))
             {| msg_function := "smut_consume_chunk";
                msg_message := "Proof Obligation";
                msg_program_context := Œì;
                msg_localstore := Œ¥1;
                msg_heap := h1';
                msg_pathcondition := wco w1
             |}
             Œîpc
             (fun w2 œâ12 => smut_pure tt (subst Œ¥1 œâ12) (subst h1' œâ12))
             wrefl)
        (extract_chunk_eqb (subst c œâ01) h1).

  (* Definition smut_assert_formulak {A Œì1 Œì2 Œ£} (fml : Formula Œ£) (k : SMut Œì1 Œì2 A Œ£) : SMut Œì1 Œì2 A Œ£ := *)
  (*   smut_bind_right (smut_assert_formula fml) k. *)
  (* Definition smut_assert_formulask {A Œì1 Œì2 Œ£} (fmls : list (Formula Œ£)) (k: SMut Œì1 Œì2 A Œ£) : SMut Œì1 Œì2 A Œ£ := *)
  (*   fold_right smut_assert_formulak k fmls. *)

  (* Definition smut_leakcheck {Œì Œ£} : SMut Œì Œì Unit Œ£ := *)
  (*   smut_get_heap >>= fun _ _ h => *)
  (*   match h with *)
  (*   | nil => smut_pure tt *)
  (*   | _   => smut_error "smut_leakcheck" "Heap leak" h *)
  (*   end. *)

  (* Definition smut_make_message {Œì} (func msg : string) {Œ£0} : SMut Œì Œì Message Œ£0 := *)
  (*   fun w1 œâ01 Œ¥1 h1 => *)
  (*     pure *)
  (*       (MkSMutResult *)
  (*          {| msg_function        := func; *)
  (*             msg_message         := msg; *)
  (*             msg_program_context := Œì; *)
  (*             msg_localstore      := Œ¥1; *)
  (*             msg_heap            := h1; *)
  (*             msg_pathcondition   := pc1 *)
  (*          |} Œ¥1 h1). *)

  Definition smut_produce {Œì} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì Œì Unit) :=
    fix produce w asn {struct asn} :=
      match asn with
      | asn_formula fml => smut_box_assume_formula fml
      | asn_chunk c => valid_box smut_produce_chunk <*> persist c
      | asn_if b asn1 asn2 => smutb_demonic_match_bool b (produce w asn1) (produce w asn2)
      | asn_match_enum E k alts => smutb_demonic_match_enum k (fun K : ùë¨ùë≤ E => produce w (alts K))
      | asn_match_sum œÉ œÑ s xl asn1 xr asn2 =>
          smutb_demonic_match_sum xl xr s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (tl : (fun w0 : World => Term w0 œÉ) w1) =>
             produce (wsnoc w (xl :: œÉ)) asn1 w1 (wsnoc_sub œâ01 (xl :: œÉ) tl))
            (fun (w1 : World) (œâ01 : w ‚äí w1) (tr : (fun w0 : World => Term w0 œÑ) w1) =>
             produce (wsnoc w (xr :: œÑ)) asn2 w1 (wsnoc_sub œâ01 (xr :: œÑ) tr))
      | @asn_match_list _ œÉ s asn1 xh xt asn2 =>
          smut_demonic_match_list xh xt s (produce w asn1)
            (fun (w1 : World) (œâ01 : w ‚äí w1) (th : Term w1 œÉ) (tt : Term w1 (ty_list œÉ)) =>
             produce (wsnoc (wsnoc w (xh :: œÉ)) (xt :: ty_list œÉ)) asn2 w1
               (wsnoc_sub (wsnoc_sub œâ01 (xh :: œÉ) th) (xt :: ty_list œÉ) tt))
      | @asn_match_pair _ œÉ1 œÉ2 s xl xr asn0 =>
          smutb_demonic_match_pair xl xr s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (tl : Term w1 œÉ1) (tr : Term w1 œÉ2) =>
             produce (wsnoc (wsnoc w (xl :: œÉ1)) (xr :: œÉ2)) asn0 w1
               (wsnoc_sub (wsnoc_sub œâ01 (xl :: œÉ1) tl) (xr :: œÉ2) tr))
      | @asn_match_tuple _ œÉs Œî s p asn0 =>
          smut_demonic_match_tuple id p s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (ts : NamedEnv (Term w1) Œî) =>
             produce (MkWorld (subst (wco w) (sub_cat_left Œî))) asn0 w1
               (MkAcc (MkWorld (subst (wco w) (sub_cat_left Œî))) w1 (wsub œâ01 ‚ñ∫‚ñ∫ ts)))
      | @asn_match_record _ R Œî s p asn0 =>
          smut_demonic_match_record id p s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (ts : NamedEnv (Term w1) Œî) =>
             produce (MkWorld (subst (wco w) (sub_cat_left Œî))) asn0 w1
               (MkAcc (MkWorld (subst (wco w) (sub_cat_left Œî))) w1 (wsub œâ01 ‚ñ∫‚ñ∫ ts)))
      | asn_match_union U s alt__ctx alt__pat alt__rhs =>
          smut_demonic_match_union id alt__pat s
            (fun (K : ùëºùë≤ U) (w1 : World) (œâ01 : w ‚äí w1) (ts : NamedEnv (Term w1) (alt__ctx K)) =>
             produce (MkWorld (subst (wco w) (sub_cat_left (alt__ctx K)))) (alt__rhs K) w1
               (MkAcc (MkWorld (subst (wco w) (sub_cat_left (alt__ctx K)))) w1 (wsub œâ01 ‚ñ∫‚ñ∫ ts)))
      | asn_sep asn1 asn2 => smut_bind_right (produce w asn1) (produce w asn2)
      | asn_exist œÇ œÑ asn0 =>
        fun (w1 : World) (œâ01 : w ‚äí w1) =>
          smut_demonic (Some œÇ) œÑ
            (fun (w2 : World) (œâ12 : w1 ‚äí w2) (t2 : Term w2 œÑ) =>
             produce (wsnoc w (œÇ :: œÑ)) asn0 w2 (wsnoc_sub (wtrans œâ01 œâ12) (œÇ :: œÑ) t2))
      | asn_debug =>
        fun w1 œâ01 =>
          smut_debug (MkSDebugAsn (wco w1)) (smut_pure tt)
      end.

  Definition smut_produce_fail_recursion {A Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A.
  Proof.
    refine
      (fix produce w0 asn k {struct asn} :=
         match asn with
         | asn_sep asn1 asn2 =>
           produce w0 asn1
                   (* Recursive call to produce has principal argument equal  *)
                   (* to "persist asn2 œâ01" instead of one of the following *)
                   (* variables: "asn1" "asn2". *)
                   (produce <$> persist asn2 <*> four k)
         | _ => @smut_block _ _ _ _
         end).
  Abort.

  Definition smutbbk_produce {A Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(‚ñ°(SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A).
  Proof.
    refine (fix produce w0 asn {struct asn} := _).
    destruct asn.
    - apply (smutk_assume_formula <$> persist fml).
    - intros w1 œâ01 k.
      apply (smutk_produce_chunk (subst c œâ01)).
      apply (T k).
    - intros w1 œâ01 k.
      apply smut_demonic_match_bool.
      + apply (persist__term b œâ01).
      + apply (four (produce w0 asn1) œâ01 <*> four k).
      + apply (four (produce w0 asn2) œâ01 <*> four k).
    - intros w1 œâ01 cont.
      apply (smut_demonic_match_enum (persist__term k œâ01)). intros EK.
      apply (four (produce w0 (alts EK)) œâ01 <*> four cont).
    - intros w1 œâ01 k.
      apply (smut_demonic_match_sum xl xr (persist__term s œâ01)).
      + intros w2 œâ12 t.
        eapply (produce (wsnoc w0 (xl :: œÉ)) asn1).
        apply wsnoc_sub.
        apply (wtrans œâ01 œâ12). apply t.
        apply (four k œâ12).
      + intros w2 œâ12 t.
        eapply (produce (wsnoc w0 (xr :: œÑ)) asn2).
        apply wsnoc_sub.
        apply (wtrans œâ01 œâ12). apply t.
        apply (four k œâ12).
    - intros w1 œâ01 k.
      apply (smut_demonic_match_list xh xt (persist__term s œâ01)); try apply wrefl.
      + intros w2 œâ12.
        eapply (produce _ asn1).
        apply (wtrans œâ01 œâ12).
        apply (four k œâ12).
      + intros w2 œâ12 t1 t2.
        eapply (produce (wsnoc (wsnoc w0 (xh :: _)) (xt :: _)) asn2).
        apply wsnoc_sub.
        apply wsnoc_sub.
        apply (wtrans œâ01 œâ12).
        apply t1.
        apply t2.
        apply (four k œâ12).
    - intros w1 œâ01 k.
      apply (smutb_demonic_match_pair xl xr (persist__term s œâ01)).
      intros w2 œâ12 t1 t2.
      eapply (produce (wsnoc (wsnoc w0 (xl :: œÉ1)) (xr :: œÉ2)) asn).
      apply wsnoc_sub.
      apply wsnoc_sub.
      apply (wtrans œâ01 œâ12).
      apply t1.
      apply t2.
      apply (four k œâ12).
      apply wrefl.
    - admit.
    - admit.
    - admit.
    - intros w1 œâ01 k.
      apply (produce _ asn1).
      auto.
      apply (four (produce _ asn2) œâ01 <*> four k).
    - intros w1 œâ01 k.
      apply (smut_demonic (Some œÇ) œÑ).
      intros w2 œâ12 t2.
      apply (produce (wsnoc w0 (œÇ :: œÑ)) asn).
      apply wsnoc_sub.
      apply (wtrans œâ01 œâ12).
      cbn; auto.
      apply (four k).
      auto.
    - intros w1 œâ01 k.
      apply smut_debug.
      intros Œ¥ h.
      eapply (MkSDebugAsn (wco w1) Œ¥ h).
      apply k. apply wrefl.
  Admitted.

  Definition smutbk_consume {A Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A).
  Admitted.

  Definition smutbbk_consume {A Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(‚ñ°(SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A).
  Admitted.

  Definition smutkb_produce {A Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì1 Œì2 A).
  Proof.
    refine (fix produce w0 asn k {struct asn} := _).
    destruct asn.
    - apply (valid_box smutk_assume_formula <*> persist fml <*> four k).
    - apply (valid_box smutk_produce_chunk <*> persist c <*> k).
    - apply (smutb_demonic_match_bool b (produce w0 asn1 k) (produce w0 asn2 k)).
    - apply (smutb_demonic_match_enum k0). intros EK.
      apply (produce w0 (alts EK) k).
    - apply (smutb_demonic_match_sum xl xr s).
      + intros w1 œâ01 tl.
        apply (produce (wsnoc w0 (xl :: œÉ)) asn1).
        apply (four k). apply wsnoc_sup.
        apply (wsnoc_sub œâ01). apply tl.
      + intros w1 œâ01 tr.
        apply (produce (wsnoc w0 (xr :: œÑ)) asn2).
        apply (four k). apply wsnoc_sup.
        apply (wsnoc_sub œâ01). apply tr.
    - apply (smut_demonic_match_list xh xt s).
      + apply (produce w0 asn1 k).
      + intros w1 œâ01 thead ttail.
        apply (produce (wsnoc (wsnoc w0 (xh :: œÉ)) (xt :: ty_list œÉ)) asn2).
        apply (four k).
        eapply (wtrans wsnoc_sup wsnoc_sup).
        apply wsnoc_sub; cbn; auto.
        apply wsnoc_sub; cbn; auto.
    - apply (smutb_demonic_match_pair xl xr s).
      intros w1 œâ01 tl tr.
      apply (produce (wsnoc (wsnoc w0 (xl :: œÉ1)) (xr :: œÉ2)) asn).
      apply (four k).
      eapply (wtrans wsnoc_sup wsnoc_sup).
      apply wsnoc_sub; cbn; auto.
      apply wsnoc_sub; cbn; auto.
    - apply (smut_demonic_match_tuple id p s).
      intros w1 œâ01 ts.
      apply (produce (MkWorld (subst (wco w0) (sub_cat_left Œî))) asn).
      apply (four k).
      constructor. cbn. apply sub_cat_left.
      constructor. cbn. apply (wsub œâ01 ‚ñ∫‚ñ∫ ts).
    - apply (smut_demonic_match_record id p s).
      intros w1 œâ01 ts.
      apply (produce (MkWorld (subst (wco w0) (sub_cat_left Œî))) asn).
      apply (four k).
      constructor. cbn. apply sub_cat_left.
      constructor. cbn. apply (wsub œâ01 ‚ñ∫‚ñ∫ ts).
    - apply (smut_demonic_match_union id alt__pat s).
      intros UK w1 œâ01 ts.
      apply (produce (MkWorld (subst (wco w0) (sub_cat_left (alt__ctx UK)))) (alt__rhs UK)).
      apply (four k).
      constructor. cbn. apply sub_cat_left.
      constructor. cbn. apply (wsub œâ01 ‚ñ∫‚ñ∫ ts).
    - apply (produce w0 asn1).
      apply (produce w0 asn2).
      apply k.
    - intros w1 œâ01.
      apply (smut_demonic (Some œÇ) œÑ).
      intros w2 œâ12 t2.
      apply (produce (wsnoc w0 (œÇ :: œÑ)) asn).
      apply (four k).
      apply wsnoc_sup.
      apply wsnoc_sub.
      apply (wtrans œâ01 œâ12).
      cbn; auto.
    - apply (valid_box
             smut_debug
             <*> (fun w1 _ => MkSDebugAsn (wco w1))
             <*> k).
  Defined.

  Definition smutk_produce {AT Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
    fun w0 asn k => smutkb_produce asn k wrefl.

  Definition smut_consume {Œì} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì Œì Unit) :=
    fix consume w asn {struct asn} :=
      match asn with
      | asn_formula fml => smut_box_assert_formula fml
      | asn_chunk c => smut_consume_chunk c
      | asn_if b asn1 asn2 => smut_angelic_match_bool b (consume w asn1) (consume w asn2)
      | asn_match_enum E k alts => smut_angelic_match_enum k (fun K : ùë¨ùë≤ E => consume w (alts K))
      | asn_match_sum œÉ œÑ s xl asn1 xr asn2 =>
          smut_angelic_match_sum xl xr s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (tl : (fun w0 : World => Term w0 œÉ) w1) =>
             consume (wsnoc w (xl :: œÉ)) asn1 w1 (wsnoc_sub œâ01 (xl :: œÉ) tl))
            (fun (w1 : World) (œâ01 : w ‚äí w1) (tr : (fun w0 : World => Term w0 œÑ) w1) =>
             consume (wsnoc w (xr :: œÑ)) asn2 w1 (wsnoc_sub œâ01 (xr :: œÑ) tr))
      | @asn_match_list _ œÉ s asn1 xh xt asn2 =>
          smut_angelic_match_list xh xt s (consume w asn1)
            (fun (w1 : World) (œâ01 : w ‚äí w1) (th : Term w1 œÉ) (tt : Term w1 (ty_list œÉ)) =>
             consume (wsnoc (wsnoc w (xh :: œÉ)) (xt :: ty_list œÉ)) asn2 w1
               (wsnoc_sub (wsnoc_sub œâ01 (xh :: œÉ) th) (xt :: ty_list œÉ) tt))
      | @asn_match_pair _ œÉ1 œÉ2 s xl xr asn0 =>
          smut_angelic_match_pair xl xr s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (tl : Term w1 œÉ1) (tr : Term w1 œÉ2) =>
             consume (wsnoc (wsnoc w (xl :: œÉ1)) (xr :: œÉ2)) asn0 w1
               (wsnoc_sub (wsnoc_sub œâ01 (xl :: œÉ1) tl) (xr :: œÉ2) tr))
      | @asn_match_tuple _ œÉs Œî s p asn0 =>
          smut_angelic_match_tuple id p s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (ts : NamedEnv (Term w1) Œî) =>
             consume (MkWorld (subst (wco w) (sub_cat_left Œî))) asn0 w1
               (MkAcc (MkWorld (subst (wco w) (sub_cat_left Œî))) w1 (wsub œâ01 ‚ñ∫‚ñ∫ ts)))
      | @asn_match_record _ R Œî s p asn0 =>
          smut_angelic_match_record id p s
            (fun (w1 : World) (œâ01 : w ‚äí w1) (ts : NamedEnv (Term w1) Œî) =>
             consume (MkWorld (subst (wco w) (sub_cat_left Œî))) asn0 w1
               (MkAcc (MkWorld (subst (wco w) (sub_cat_left Œî))) w1 (wsub œâ01 ‚ñ∫‚ñ∫ ts)))
      | asn_match_union U s alt__ctx alt__pat alt__rhs =>
          smut_angelic_match_union id alt__pat s
            (fun (K : ùëºùë≤ U) (w1 : World) (œâ01 : w ‚äí w1) (ts : NamedEnv (Term w1) (alt__ctx K)) =>
             consume (MkWorld (subst (wco w) (sub_cat_left (alt__ctx K)))) (alt__rhs K) w1
               (MkAcc (MkWorld (subst (wco w) (sub_cat_left (alt__ctx K)))) w1 (wsub œâ01 ‚ñ∫‚ñ∫ ts)))
      | asn_sep asn1 asn2 => smut_bind_right (consume w asn1) (consume w asn2)
      | asn_exist œÇ œÑ asn0 =>
        fun (w1 : World) (œâ01 : w ‚äí w1) =>
          smut_angelic (Some œÇ) œÑ
            (fun (w2 : World) (œâ12 : w1 ‚äí w2) (t2 : Term w2 œÑ) =>
             consume (wsnoc w (œÇ :: œÑ)) asn0 w2 (wsnoc_sub (wtrans œâ01 œâ12) (œÇ :: œÑ) t2))
      | asn_debug =>
        fun w1 œâ01 =>
          smut_debug (MkSDebugAsn (wco w1)) (smut_pure tt)
      end.

  Definition smutk_consume {AT Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
  Proof.
    intros w0 asn k.
    apply (smut_bind (T (smut_consume asn))).
    intros w1 œâ01 _.
    apply k. auto.
  Defined.

  Definition smutkb_consume {AT Œì1 Œì2} :
    ‚ä¢ Assertion -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT).
  Proof.
    intros w0 asn k.
    apply (smut_bbind (smut_consume asn)).
    intros w1 œâ01 _.
    apply k. auto.
  Defined.

  Section WithConfig.

    Variable cfg : Config.

    Definition smut_call {Œì Œî œÑ} (contract : SepContract Œî œÑ) :
      ‚ä¢ SStore Œî -> SMut Œì Œì (STerm œÑ).
    Proof.
      refine
        (match contract with
         | MkSepContract _ _ Œ£e Œ¥e req result ens => _
         end).
      intros w0 ts Œ¥0 h0.
      apply (angelic_freshen_ctx id Œ£e).
      intros w1 œâ01 evars.
      apply (assert_formulask
               {|
                 msg_function := "smut_call";
                 msg_message := "argument pattern match";
                 msg_program_context := Œì;
                 msg_localstore := subst Œ¥0 œâ01;
                 msg_heap := subst h0 œâ01;
                 msg_pathcondition := wco w1;
               |} (formula_eqs (subst Œ¥e evars) (subst ts œâ01))); try exact wrefl.
      intros w2 œâ12.
      eapply bind.
      refine (smut_consume (w := @MkWorld Œ£e nil) req _ (subst Œ¥0 (wtrans œâ01 œâ12)) (subst h0 (wtrans œâ01 œâ12))).
      constructor. cbn.
      apply (subst (T := Sub _) evars œâ12).
      intros w3 œâ23 [_ Œ¥3 h3].
      apply (demonic (Some result) œÑ).
      intros w4 œâ34 res.
      eapply bind.
      refine (smut_produce
               (w := @MkWorld (Œ£e ‚ñª (result::œÑ)) nil)
               ens
               _
               (subst Œ¥3 œâ34) (subst h3 œâ34)).
      constructor. cbn.
      apply (sub_snoc (subst (T := Sub _) evars (wtrans œâ12 (wtrans œâ23 œâ34))) (result :: œÑ) res).
      intros w5 œâ45 [_ Œ¥5 h5].
      apply (pure {| smutres_value := subst (T := fun Œ£ => Term Œ£ _) res œâ45; smutres_store := Œ¥5; smutres_heap := h5 |}).
    Defined.

    Definition smutk_call {Œì1 Œì2 Œî œÑ AT} (contract : SepContract Œî œÑ) :
      ‚ä¢ SStore Œî -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
    Proof.
      refine
        (match contract with
         | MkSepContract _ _ Œ£e Œ¥e req result ens => _
         end).
      intros w0 ts k Œ¥0 h0.
      apply (angelic_freshen_ctx id Œ£e).
      intros w1 œâ01 evars.
      apply (assert_formulask
               {|
                 msg_function := "smut_call";
                 msg_message := "argument pattern match";
                 msg_program_context := Œì1;
                 msg_localstore := subst Œ¥0 œâ01;
                 msg_heap := subst h0 œâ01;
                 msg_pathcondition := wco w1;
               |} (formula_eqs (subst Œ¥e evars) (subst ts œâ01))); try exact wrefl.
      intros w2 œâ12.
      apply (smutk_consume (Œì1 := Œì1) (Œì2 := Œì2) (subst req (subst (T := Sub _) evars œâ12))).
      intros w3 œâ23 Œ¥3 h3.
      apply (demonic (Some result) œÑ).
      intros w4 œâ34 res.
      apply (smutk_produce (Œì1 := Œì1) (Œì2 := Œì2)).
      apply (subst ens).
      apply sub_snoc.
      apply (subst (T := Sub _) evars (wtrans œâ12 (wtrans œâ23 œâ34))).
      apply res.
      eapply K. 2: apply (persist__term res).
      apply (four k).
      apply (wtrans (wtrans œâ01 œâ12) (wtrans œâ23 œâ34)).
      apply (subst Œ¥3 œâ34).
      apply (subst h3 œâ34).
      apply (subst Œ¥0 (wtrans œâ01 œâ12)).
      apply (subst h0 (wtrans œâ01 œâ12)).
    Defined.

    Definition smutbbk_call {Œì1 Œì2 Œî œÑ AT} (contract : SepContract Œî œÑ) :
      ‚ä¢ SStore Œî -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
    Proof.
      refine
        (match contract with
         | MkSepContract _ _ Œ£e Œ¥e req result ens => _
         end).
      intros w0 ts k Œ¥0 h0.
      apply (angelic_freshen_ctx id Œ£e).
      intros w1 œâ01 evars.
      apply (assert_formulask
               {|
                 msg_function := "smut_call";
                 msg_message := "argument pattern match";
                 msg_program_context := Œì1;
                 msg_localstore := subst Œ¥0 œâ01;
                 msg_heap := subst h0 œâ01;
                 msg_pathcondition := wco w1;
               |} (formula_eqs (subst Œ¥e evars) (subst ts œâ01))); try exact wrefl.
      intros w2 œâ12.
      apply (@smutbbk_consume AT Œì1 Œì2 (@MkWorld Œ£e nil) req).
      refine (wtrans _ œâ12).
      constructor. apply evars.
      2: apply (subst Œ¥0 (wtrans œâ01 œâ12)).
      2: apply (subst h0 (wtrans œâ01 œâ12)).
      intros w3 œâ23 Œ¥3 h3.
      apply (demonic (Some result) œÑ).
      intros w4 œâ34 res.
      apply (smutk_produce (Œì1 := Œì1) (Œì2 := Œì2)).
      apply (subst ens).
      apply sub_snoc.
      apply (subst (T := Sub _) evars (wtrans œâ12 (wtrans œâ23 œâ34))).
      apply res.
      eapply K. 2: apply (persist__term res).
      apply (four k).
      apply (wtrans (wtrans œâ01 œâ12) (wtrans œâ23 œâ34)).
      apply (subst Œ¥3 œâ34).
      apply (subst h3 œâ34).
    Defined.


    Definition smutk_call_debug {Œì1 Œì2 Œî œÑ AT} (f : ùë≠ Œî œÑ) (contract : SepContract Œî œÑ) :
      ‚ä¢ SStore Œî -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
      fun w0 Œ¥Œî k =>
        let o := smutk_call contract Œ¥Œî k in
        if config_debug_function cfg f
        then
          smut_debug
            (fun Œ¥ h => {| sdebug_call_function_parameters := Œî;
                           sdebug_call_function_result_type := œÑ;
                           sdebug_call_function_name := f;
                           sdebug_call_function_contract := contract;
                           sdebug_call_function_arguments := Œ¥Œî;
                           sdebug_call_program_context := Œì1;
                           sdebug_call_pathcondition := wco w0;
                           sdebug_call_localstore := Œ¥;
                           sdebug_call_heap := h|})
            o
        else o.

    Definition smutk_exec {A} `{subA: Subst A} :
      forall {Œì1 Œì2 œÑ} (s : Stm Œì1 œÑ),
        (‚ä¢ STerm œÑ -> SMut Œì1 Œì2 A) ->
        ‚ä¢ SMut Œì1 Œì2 A.
    Proof.
      refine (fix smutk_exec {Œì1 Œì2 œÑ} s k {struct s} := _).
      destruct s.
      - intros w. apply k. apply (term_lit œÑ l).
      - intros w Œ¥. apply (k w (seval_exp Œ¥ e) Œ¥).
      - apply
          (smutk_exec Œì1 Œì2 œÉ s1
         (fun (w1 : World) (t1 : Term w1 œÉ) (Œ¥1 : SStore Œì1 w1) (h1 : SHeap w1) =>
          smutk_exec (Œì1 ‚ñª (x :: œÉ)) Œì2 œÑ s2
            (fun (w2 : World) (t2 : Term w2 œÑ) (Œ¥2 : SStore (Œì1 ‚ñª (x :: œÉ)) w2) => k w2 t2 (env_tail Œ¥2)) w1
            (Œ¥1 ‚ñ∫ (x :: œÉ ‚Ü¶ t1)) h1)).
    Abort.

    Definition smutk_exec {A} `{subA: Subst A} :
      forall {Œì1 Œì2 œÑ} (s : Stm Œì1 œÑ),
      ‚ä¢ ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 A) -> SMut Œì1 Œì2 A.
    Proof.
      refine (fix smutk_exec {Œì1 Œì2 œÑ} s {w0} k {struct s} := _).
      destruct s.
      - apply (T k). apply (term_lit œÑ l).
      - apply (smutk_eval_exp e).
        apply (T k).
      - apply (smutk_exec _ _ _ s1).
        intros w1 œâ01 t1.
        eapply (smutk_push_local t1).
        apply (smutk_exec _ _ _ s2).
        intros w2 œâ12 t2.
        apply smutk_pop_local.
        apply (four k œâ01). auto. auto.
      - apply (smutk_pushs_local (lift Œ¥)).
        apply (smutk_exec _ _ _ s).
        intros w1 œâ01 t.
        apply smutk_pops_local.
        apply k. auto. auto.
      - apply (smutk_exec _ _ _ s).
        intros w1 œâ01 t Œ¥ h.
        apply k. auto. auto.
        apply (Œ¥ ‚ü™ x ‚Ü¶ t ‚ü´)%env.
        auto.
      - apply (smutk_eval_exps es).
        intros args.
        destruct (CEnv f) as [c|].
        apply (smutk_call_debug f c args k).
        apply (smut_error "smut_exec" "Function call without contract" (f,args)).
      - rename Œ¥ into Œ¥Œî. intros Œ¥0 h0.
        apply (smutk_exec _ _ _ s).
        intros w1 œâ01 t Œ¥Œî' h1.
        apply k. auto. auto. apply (subst Œ¥0 œâ01). auto.
        apply (lift Œ¥Œî). auto.
      - apply (smutk_eval_exps es).
        intros args.
        apply (smutk_call (CEnvEx f) args k).
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_bool t); auto using wrefl.
        + intros w1 œâ01.
          apply (smutk_exec _ _ _ s1).
          apply (four k). auto.
        + intros w1 œâ01.
          apply (smutk_exec _ _ _ s2).
          apply (four k). auto.
      - apply (smutk_exec _ _ _ s1).
        intros w1 œâ01 t1.
        apply (smutk_exec _ _ _ s2).
        apply (four k). auto.
      - apply (smutk_eval_exp e1). intros t.
        apply (smutk_assume_formula (formula_bool t)).
        intros w1 œâ01.
        apply (smutk_exec _ _ _ s).
        apply (four k). auto.
      - apply smut_block.
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_list (ùëøtoùë∫ xh) (ùëøtoùë∫ xt) t); auto using wrefl.
        + intros w1 œâ01.
          apply (smutk_exec _ _ _ s1).
          apply (four k). auto.
        + intros w1 œâ01 thead ttail.
          eapply (smutk_pushs_local (env_snoc (env_snoc env_nil (_,_) thead) (_,_) ttail)).
          apply (smutk_exec _ _ _ s2).
          intros w2 œâ12 res.
          apply (smutk_pops_local (Œî := ctx_nil ‚ñª _ ‚ñª _)).
          apply (four k œâ01); auto.
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_sum (ùëøtoùë∫ xinl) (ùëøtoùë∫ xinr) t); auto using wrefl.
        + intros w1 œâ01 tl.
          eapply (smutk_push_local tl).
          apply (smutk_exec _ _ _ s1).
          intros w2 œâ12 res.
          apply smutk_pop_local.
          apply (four k œâ01); auto.
        + intros w1 œâ01 tr.
          eapply (smutk_push_local tr).
          apply (smutk_exec _ _ _ s2).
          intros w2 œâ12 res.
          apply smutk_pop_local.
          apply (four k œâ01); auto.
      - apply (smutk_eval_exp e). intros t.
        apply (smutb_demonic_match_pair (ùëøtoùë∫ xl) (ùëøtoùë∫ xr) t); auto using wrefl.
        intros w1 œâ01 t1 t2.
        eapply (smutk_pushs_local (env_snoc (env_snoc env_nil (_,_) t1) (_,_) t2)).
        apply (smutk_exec _ _ _ s).
        intros w2 œâ12 res.
        apply (smutk_pops_local (Œî := ctx_nil ‚ñª _ ‚ñª _)).
        apply (four k œâ01); auto.
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_enum t); auto using wrefl.
        intros K.
        intros w1 œâ01.
        apply (smutk_exec _ _ _ (alts K)).
        apply (four k). auto.
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_tuple ùëøtoùë∫ p t); auto using wrefl.
        intros w1 œâ01 ts.
        eapply (smutk_pushs_local ts).
        apply (smutk_exec _ _ _ s).
        intros w2 œâ12 res.
        apply (smutk_pops_local).
        apply (four k œâ01); auto.
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_union ùëøtoùë∫ alt__pat t); auto using wrefl.
        intros K w1 œâ01 ts.
        eapply (smutk_pushs_local ts).
        apply (smutk_exec _ _ _ (alt__rhs K)).
        intros w2 œâ12 res.
        apply (smutk_pops_local).
        apply (four k œâ01); auto.
      - apply (smutk_eval_exp e). intros t.
        apply (smut_demonic_match_record ùëøtoùë∫ p t); auto using wrefl.
        intros w1 œâ01 ts.
        eapply (smutk_pushs_local ts).
        apply (smutk_exec _ _ _ s).
        intros w2 œâ12 res.
        apply (smutk_pops_local).
        apply (four k œâ01); auto.
      - eapply (smut_angelic None œÑ).
        intros w1 œâ01 t.
        apply (smutk_consume (asn_chunk (chunk_ptsreg reg t))).
        intros w2 œâ12.
        apply (smutk_produce (asn_chunk (chunk_ptsreg reg (subst t œâ12)))).
        eapply (K (four k (wtrans œâ01 œâ12))).
        intros w3 œâ23.
        apply (subst (T := STerm _) t (wtrans œâ12 œâ23)).
      - eapply (smut_angelic None œÑ).
        intros w1 œâ01 told.
        apply (smutk_consume (asn_chunk (chunk_ptsreg reg told))).
        intros w2 œâ12.
        apply (smutk_eval_exp e). intros tnew.
        apply (smutk_produce (asn_chunk (chunk_ptsreg reg tnew))).
        eapply (K (four k (wtrans œâ01 œâ12))).
        intros w3 œâ23.
        apply (subst (T := STerm _) tnew œâ23).
      - apply (smut_error "smut_exec" "stm_bind not supported" tt).
      - apply smut_debug.
        intros Œ¥0 h0.
        econstructor.
        apply (wco w0).
        apply Œ¥0.
        apply h0.
        apply (smutk_exec _ _ _ s).
        apply k.
    Defined.

    Definition smut_contract {Œî œÑ} (c : SepContract Œî œÑ) (s : Stm Œî œÑ) :
      let w := @MkWorld (sep_contract_logic_variables c) nil in
      SMut Œî Œî Unit w.
    Proof.
      refine
        (match c with
         | MkSepContract _ _ Œ£ Œ¥ req result ens => _
           (* smut_produce req ;; *)
           (* smut_exec s      >>= fun Œ£1 Œ∂1 t => *)
           (* smut_sub (sub_snoc Œ∂1 (result,œÑ) t) (smut_consume ens) ;; *)
           (* (* smut_leakcheck *) *)
           (* smut_block *)
         end).
      intros w0.
      apply (smutk_produce (w:=w0) req).
      intros w1 œâ01.
      apply (smutk_exec s).
      intros w2 œâ12.
      intros res.
      apply (smutkb_consume (w:=wsnoc w0 (result :: œÑ)) ens).
      intros w3 œâ23.
      apply smut_block.
      apply wsnoc_sub.
      apply (wtrans œâ01 œâ12).
      apply res.
    Defined.

    Definition smut_contract_outcome {Œî : PCtx} {œÑ : Ty} (c : SepContract Œî œÑ) (s : Stm Œî œÑ) :
      SPath Unit wnil.
      pose (sep_contract_localstore c) as Œ¥.
      pose (smut_contract c s Œ¥ nil).
      refine (demonic_close (map _ s0)).
      intros ? ? ?. constructor.
    Defined.

    Definition ValidContractWithConfig {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
      VerificationCondition (prune (prune (smut_contract_outcome c body))).

  End WithConfig.

  Definition ValidContract {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
    VerificationCondition (prune (prune (smut_contract_outcome default_config c body))).

  Definition ValidContractReflect {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
    is_true (ok (prune (smut_contract_outcome default_config c body))).

  Lemma dynmutevarreflect_sound {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) :
    ValidContractReflect c body ->
    ValidContract c body.
  Proof.
    (* intros H. *)
    (* apply (outcome_ok_spec _ (fun _ => True)) in H. *)
    (* now rewrite outcome_satisfy_bind in H. *)
  Admitted.

  Module EvarEnv.

    Definition smut_consume_chunk_evar {Œì Œ£e} (c : Chunk Œ£e) :
      ‚ä¢ EvarEnv Œ£e -> SMut Œì Œì (EvarEnv Œ£e) :=
      fun w0 L0 Œ¥0 h0 =>
        angelic_listk
          (A := Pair (EvarEnv Œ£e) SHeap)
          {| msg_function := "smut_consume_chunk_evar";
             msg_message := "Empty extraction";
             msg_program_context := Œì;
             msg_localstore := Œ¥0;
             msg_heap := h0;
             msg_pathcondition := wco w0
          |}
          (fun '(L1, h1) => smut_pure L1 Œ¥0 h1)
          (extract_chunk c h0 L0).

     (* This function tries to assert the equality between the terms `te` from *)
    (*     a callee context and `tr` from the caller context. The callee context *)
    (*     variables are all evars and if possible, it will fill in evars that are *)
    (*     strictly necessary for the assertion to be true. *)
    Definition smut_assert_term_eq_evar {Œì Œ£e œÉ} (te : STerm œÉ Œ£e) :
      ‚ä¢ STerm œÉ -> EvarEnv Œ£e -> SMut Œì Œì (EvarEnv Œ£e) :=
      fun w0 tr L0 =>
        (* Try to fully match te against tr1, potentially filling in some evars. *)
        match match_term te tr L0 with
        | Some L1 => smut_pure L1
        | None =>
          (* The match failed. See if all evars in te are already known.*)
          match eval_term_evar L0 te with
          | Some te1 =>
            (* All evars are known. So assert the equality between the terms in *)
    (*            the caller context. *)
            smutk_assert_formula
              (formula_eq te1 tr)
              (fun w1 œâ01 => smut_pure (subst L0 œâ01))
          | None =>
            (* Give up. This is currently missing some corner cases where a *)
    (*            sub-term of te would already constrain all appearing evars, but *)
    (*            which can't be fully unified with tr. match_term could be *)
    (*            augmented to also handle this kind of case. *)
            smut_error
              "smut_assert_term_eq_evar"
              "Uninstantiated evars variable"
              {| evarerror_env := L0;
                 evarerror_data := (te,tr)
              |}
          end
        end.

    Equations(noeqns) smut_assert_namedenv_eq_evar {Œì X Œ£e œÉs}
             (te : NamedEnv (X:=X) (Term Œ£e) œÉs) {w0 : World}
             (tr : NamedEnv (Term w0) œÉs)
             (L0 : EvarEnv Œ£e w0) : SMut Œì Œì (EvarEnv Œ£e) w0 :=
      smut_assert_namedenv_eq_evar env_nil             env_nil L0 := smut_pure L0;
      smut_assert_namedenv_eq_evar (env_snoc E1 b1 t1) (env_snoc E2 b2 t2) L0 :=
        smut_bind (smut_assert_namedenv_eq_evar E1 E2 L0)
          (fun w1 œâ01 L1 =>
             smut_assert_term_eq_evar t1 (subst (T := STerm _) t2 œâ01) L1).

    Definition smut_consume_formula_evar {Œì Œ£e} (fml : Formula Œ£e) :
      ‚ä¢ EvarEnv Œ£e -> SMut Œì Œì (EvarEnv Œ£e) :=
      fun w0 L =>
        match fml with
        | formula_bool t =>
          match eval_term_evar L t with
          | Some t0 => smutk_assert_formula
                         (formula_bool t0)
                         (fun w œâ01 => smut_pure (subst L œâ01))
          | None => smut_error
                      "smut_consume_formula_evar"
                      "Uninstantiated evars when consuming formula"
                      {| evarerror_env := L; evarerror_data := fml |}
          end
        | formula_prop Œ∂ P =>
          match evarenv_to_option_sub L with
          | Some s => smutk_assert_formula
                        (formula_prop (subst Œ∂ s) P)
                        (fun w1 œâ01 => smut_pure (subst L œâ01))
          | None => smut_error
                      "smut_consume_formula_evar"
                      "Uninstantiated evars when consuming formula"
                      {| evarerror_env := L; evarerror_data := fml |}
          end
        | formula_eq t1 t2 =>
          match eval_term_evar L t1 , eval_term_evar L t2 with
          | Some t1' , Some t2' => smutk_assert_formula
                                     (formula_eq t1' t2')
                                     (fun w1 œâ01 => smut_pure (subst L œâ01))
          | Some t1' , None     => smut_assert_term_eq_evar t2 t1' L
          | None     , Some t2' => smut_assert_term_eq_evar t1 t2' L
          | None     , None     => smut_error
                                     "smut_consume_formula_evar"
                                     "Uninstantiated evars when consuming formula"
                                     {| evarerror_env := L; evarerror_data := fml |}
          end
        | @formula_neq _ œÉ t1 t2 =>
          match eval_term_evar L t1 , eval_term_evar L t2 with
          | Some t1' , Some t2' => smutk_assert_formula
                                     (formula_neq t1' t2')
                                     (fun w1 œâ01 => smut_pure (subst L œâ01))
          (* | Some t1' , None     => smut_assert_term_eq_evar t2 t1' L *)
          (* | None     , Some t2' => smut_assert_term_eq_evar t1 t2' L *)
          | _        , _        => smut_error
                                     "smut_consume_formula_evar"
                                     "Uninstantiated evars when consuming formula"
                                     {| evarerror_env := L; evarerror_data := fml |}
          end
        end.

  End EvarEnv.

  Module EvarExplanation.

    (* We currently avoid introducing existential variables into the
       underlying symbolic path monad, because this would make the system more
       complicated. Instead we avoid using existential quantification of the
       path monad altogether and deal with it in the mutator instead.

       This is achieved by temporarily creating an [EvarEnv] when needed, i.e.
       when *consuming* the post-condition at the end of a function, or the
       pre-condition of a called function. An [EvarEnv] can be understood as a
       system of equations between existential variables and term in which
       those existentials are fresh (c.f. solved forms for Hindley-Milner
       constraint-based type checking).

       Effectively, we have something like this

           [‚àÄŒ±ÃÑ‚àÉŒ≤ÃÑ, (Œ≤·µ¢ = t·µ¢) ‚àß ..]

       All existential variables Œ≤ÃÑ (angelic choice) come after the universal
       variables Œ±ÃÑ (demonic choice). We also avoid introducing new universals
       during consume to keep this order. In this setting the [EvarEnv] can be
       interpreted as a set of equations between a subset of existential
       variables [Œ≤·µ¢] and terms [t·µ¢] such that [freevars (t·µ¢) ‚äÜ Œ±ÃÑ`].

       Equations are discovered by semi-unification and added to the EvarEnv.
       See [smut_consume_formula_evar] and [smut_consume_chunk_evar] for
       details.
     *)

    Lemma exists_distr A P Q :
      (exists a : A, P a \/ Q a) <->
      (exists a : A, P a) \/ (exists a, Q a).
    Proof. firstorder. Qed.

    Lemma exists_distr_conj A P Q :
      (exists a : A, P /\ Q a) <->
      P /\ (exists a : A, Q a).
    Proof. firstorder. Qed.

    Lemma if_demonic (b : bool) (P Q : Prop) :
      (if b then P else Q) <->
      (b = true -> P) /\ (b = false -> Q).
    Proof. destruct b; intuition. Qed.

    Lemma if_angelic (b : bool) (P Q : Prop) :
      (if b then P else Q) <->
      (b = true /\ P) \/ (b = false /\ Q).
    Proof. destruct b; intuition. Qed.

  End EvarExplanation.

  Module ModalWP.

    Import LogicalRelation.

    Definition wp {A} :
      (* ‚ä¢ ‚ñ°(A -> SymInstance -> PROP) -> SPath A -> SymInstance -> PROP := *)
      forall w, (Box (A -> SymInstance -> PROP) w) -> SPath A w -> SymInstance w -> Prop :=
      fix WP {w} POST o Œπ :=
        match o with
        | pure a                            => T POST a Œπ
        | angelic_binary o1 o2              => (WP POST o1 Œπ) \/ (WP POST o2 Œπ)
        | demonic_binary o1 o2              => (WP POST o1 Œπ) /\ (WP POST o2 Œπ)
        | error msg                         => Error msg
        | block                             => True
        | assertk fml msg o                 => inst fml Œπ /\ WP (four POST (wformula_sup)) o Œπ
        | assumek fml o                     => inst (A := Prop) fml Œπ -> WP (four POST (wformula_sup)) o Œπ
        | angelicv b k                      => exists (v : Lit (snd b)),
                                               WP (four POST wsnoc_sup) k (env_snoc Œπ b v)
        | demonicv b k                      => forall (v : Lit (snd b)),
                                               WP (four POST wsnoc_sup) k (env_snoc Œπ b v)
        | @assert_vareq _ _ x œÉ xIn t msg k => let Œπ'  := env_remove' _ Œπ xIn in
                                               env_lookup Œπ xIn = inst t Œπ' /\ WP (four POST wsubst_sup) k Œπ'
        | @assume_vareq _ _ x œÉ xIn t k     => let Œπ'  := env_remove' _ Œπ xIn in
                                               env_lookup Œπ xIn = inst t Œπ' -> WP (four POST wsubst_sup) k Œπ'
        | debug d k                         => Debug (inst d Œπ) (WP POST k Œπ)
        end%type.

    Definition wpbox {A} :
      ‚ä¢ ‚ñ°(A -> SymInstance -> PROP) -> ‚ñ°(SPath A -> SymInstance -> PROP).
    Proof.
      intros w0 POST.
      refine (K _ (four POST)).
      intros w1 œâ01.
      unfold Box, Impl in *.
      apply (@wp A).
    Defined.

    Definition IPROP : TYPE :=
      SymInstance -> PROP.

    Definition Dijkstra (A : TYPE) : TYPE :=
      ‚ñ°(A -> IPROP) -> IPROP.

    Definition wp' {A} :
      ‚ä¢ SPath A -> Dijkstra A :=
      fun w o POST => wp POST o.

    Global Instance LRSPath {A} `{LR A} : LR (SPath A) :=
      fun w0 w1 œâ01 o0 o1 =>
        forall
          (POST : Box (A -> SymInstance -> PROP) w0)
          (POST_dcl : dcl POST)
          (Œπ1 : SymInstance w1),
          wp POST o0 (inst (T := Sub _) œâ01 Œπ1) ->
          wp (four POST œâ01) o1 Œπ1.

    Hint Unfold four : core.

    Lemma wp_monotonic' {A w0} (p : SPath A w0)
      (P Q : Box (A -> SymInstance -> PROP) w0)
      (PQ : forall w1 (œâ01 : w0 ‚äí w1) a Œπ,
          P w1 œâ01 a Œπ ->
          Q w1 œâ01 a Œπ) :
      forall Œπ0 : SymInstance w0,
        wp P p Œπ0 ->
        wp Q p Œπ0.
    Proof.
      induction p; cbn.
      - apply PQ; auto.
      - intros Œπ0 [Hwp|Hwp]; [left|right]; revert Hwp.
        + now apply IHp1.
        + now apply IHp2.
      - intros Œπ0 [Hwp1 Hwp2]; split;
          [ revert Hwp1; now apply IHp1
          | revert Hwp2; now apply IHp2].
      - auto.
      - auto.
      - intros Œπ0 [Hfml Hwp]. split; auto.
        revert Hwp. apply IHp. auto.
      - intros Œπ0 Hwp Hfml; specialize (Hwp Hfml). revert Hwp.
        apply IHp. auto.
      - intros Œπ0 [v Hwp]; exists v; revert Hwp.
        apply IHp. intros ? ?. apply PQ.
      - intros Œπ0 Hwp v; specialize (Hwp v); revert Hwp.
        apply IHp. intros ? ?. apply PQ.
      - intros Œπ0 [Hfml Hwp]. split; auto.
        revert Hwp. apply IHp. intros ? ?. apply PQ.
      - intros Œπ0 Hwp Hfml; specialize (Hwp Hfml). revert Hwp.
        apply IHp. intros ? ?. apply PQ.
      - intros Œπ0 [Hwp]. constructor. revert Hwp.
        apply IHp, PQ.
    Qed.

    Global Instance proper_wp {A : TYPE} {w0 : World} :
      Proper
        (forall_relation
           (fun w1 => eq ==> eq ==> eq ==> iff) ==>
           eq ==> eq ==> iff)
        (@wp A w0).
    Proof.
      unfold Proper, respectful, forall_relation.
      intros P Q PQ o1 o2 <- Œπ1 Œπ2 <-.
      split; apply wp_monotonic';
        intros *; now apply PQ.
    Qed.

    Lemma wp_monotonic {A} {lrA : LR A} {persA : Persistent A}
      {lrReflA : LRRefl A}
      {w0} (p : SPath A w0) :
      forall w1 (œâ01 : w0 ‚äí w1) (Hœâ01 : went œâ01)
        (P : Box (A -> SymInstance -> PROP) w0) (P_dcl : dcl P)
        (Q : Box (A -> SymInstance -> PROP) w1)
          (PQ : lr œâ01 P Q)
          (Œπ0 : SymInstance w0)
          (Œπ1 : SymInstance w1)
          (HŒπ : lr œâ01 Œπ0 Œπ1),
          wp P p Œπ0 ->
          wp Q (persistent_spath p œâ01) Œπ1.
    Proof.
      induction p; cbn - [subst]; intros w1 œâ01 Hœâ01 P P_dcl Q PQ Œπ0 Œπ1 HŒπ.
      - unfold T.
        intros HP. eapply PQ.
        apply went_wrefl.
        apply lr_refl.
        reflexivity.
        specialize (P_dcl w wrefl went_wrefl).
        specialize (P_dcl w1 œâ01 Hœâ01).
        specialize (P_dcl a (persist a œâ01)).
        (* inster P_dcl by apply persist_lr. *)
        inster P_dcl by admit.
        specialize (P_dcl Œπ0 Œπ1 HŒπ).
        apply P_dcl in HP. revert HP.
        unfold four, wtrans, wrefl.
        cbn - [subst].
        rewrite inst_sub_id.
        rewrite sub_comp_id_left.
        now destruct œâ01.
      - intros [Hwp|Hwp]; [left|right]; revert Hwp.
        + now apply IHp1.
        + now apply IHp2.
      - intros [Hwp1 Hwp2]; split;
          [ revert Hwp1; now apply IHp1
          | revert Hwp2; now apply IHp2].
      - intros [].
      - auto.
      - rewrite HŒπ, inst_subst.
        intros [Hfml Hwp]. split; auto.
        revert Hwp. apply IHp.
        + now apply went_wacc_formula.
        + apply dcl_four; auto.
          apply went_wformula_sup.
        + admit.
        + admit.
      - rewrite HŒπ, inst_subst.
        intros Hwp Hfml; specialize (Hwp Hfml).
        revert Hwp. apply IHp.
        + now apply went_wacc_formula.
        + apply dcl_four; auto.
          apply went_wformula_sup.
        + admit.
        + admit.
      - intros [v Hwp]; exists v; revert Hwp.
        apply IHp.
        + now apply went_wacc_snoc.
        + apply dcl_four; auto.
          admit.
          (* apply went_snoc_sup. *)
        + admit.
        + admit.
      - intros Hwp v; specialize (Hwp v); revert Hwp.
        apply IHp.
        + admit.
        + admit.
        + admit.
        + admit.
      - rewrite <- inst_sub_shift.
        rewrite HŒπ, ?inst_subst in *.
        rewrite <- inst_lookup.
        intros [Hfml Hwp]. split; auto.
        revert Hwp. apply IHp.
        + admit.
        + admit.
        + admit.
        + admit.
      - rewrite <- inst_sub_shift.
        rewrite HŒπ, ?inst_subst in *.
        rewrite <- inst_lookup.
        intros Hwp Hfml; specialize (Hwp Hfml). revert Hwp.
        apply IHp.
        + admit.
        + admit.
        + admit.
        + admit.
      - intros [Hwp]. constructor. revert Hwp.
        apply IHp; auto.
    Admitted.

    Global Instance LRReflSPath {A} `{LR A} : LRRefl (SPath A).
    Proof.
      constructor.
      unfold lr, LRSPath.
      intros * POST_dcl Œπ0.
      unfold four, wrefl, wtrans. cbn [wsub].
      rewrite inst_sub_id.
      apply wp_monotonic'.
      intros w1 [Œ∂01] a1 Œπ1.
      now rewrite sub_comp_id_left.
    Qed.

    Lemma wp_map {A B} {w0} (ma : SPath A w0)
      (f : Box (A -> B) w0)
      (POST : Box (B -> SymInstance -> PROP) w0) (Œπ : SymInstance w0) :
      wp POST (map f ma) Œπ <->
      wp (bcomp POST f) ma Œπ.
    Proof.
      induction ma; cbn.
      - auto.
      - rewrite IHma1, IHma2; auto.
      - rewrite IHma1, IHma2; auto.
      - auto.
      - auto.
      - rewrite IHma; auto.
      - rewrite IHma; auto.
      - setoid_rewrite IHma; auto.
      - setoid_rewrite IHma; auto.
      - rewrite IHma; auto.
      - rewrite IHma; auto.
      - split; intros []; constructor; apply IHma; auto.
    Qed.

    Lemma wp_bind {A B} {w0} (ma : SPath A w0)
      (f : Box (A -> SPath B) w0)
      (POST : Box (B -> SymInstance -> PROP) w0)
      (Œπ0 : SymInstance w0) (Hpc0 : instpc (wco w0) Œπ0) :
      wp POST (bind ma f) Œπ0 <->
      wp (bcomp (wpbox POST) f) ma Œπ0.
    Proof with unfold wpbox, four, bcomp, K, comp, Basics.compose, valid_box;
          apply wp_monotonic'; intros w1 œâ01 a1 Œπ1;
          apply wp_monotonic'; intros w2 œâ02 b2 Œπ2;
          now rewrite <- subst_sub_comp.
      induction ma; cbn.
      - unfold T, bcomp, wpbox, K, valid_box, comp, Basics.compose.
        split; apply wp_monotonic'; eauto.
        + intros w1 [Œ∂01] a1 Œπ1. unfold four, wrefl, wtrans.
          cbn [wsub]. now rewrite sub_comp_id_left.
        + intros w1 [Œ∂01] a1 Œπ1. unfold four, wrefl, wtrans.
          cbn [wsub]. now rewrite sub_comp_id_left.
      - rewrite IHma1, IHma2; auto.
      - rewrite IHma1, IHma2; auto.
      - auto.
      - auto.
      - split; intros [Hfml Hwp]; split; auto; revert Hwp;
          rewrite IHma; unfold wformula; cbn [wctx wco];
            rewrite ?inst_pathcondition_cons; auto.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wsub].
          now rewrite sub_comp_assoc.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wsub].
          now rewrite sub_comp_assoc.
      - split; intros Hwp Hfml; specialize (Hwp Hfml); revert Hwp;
          rewrite IHma; unfold wformula; cbn [wctx wco];
            rewrite ?inst_pathcondition_cons; auto.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wsub].
          now rewrite sub_comp_assoc.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wsub].
          now rewrite sub_comp_assoc.
      - split; intros [v Hwp]; exists v; revert Hwp;
          rewrite IHma; unfold wsnoc; cbn [wctx wco];
            rewrite ?inst_subst, ?inst_sub_wk1; auto.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
      - split; intros Hwp v; specialize (Hwp v); revert Hwp;
          rewrite IHma; unfold wsnoc; cbn [wctx wco];
            rewrite ?inst_subst, ?inst_sub_wk1; auto.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
      - split; intros [Hfml Hwp]; split; auto; revert Hwp;
          rewrite IHma; unfold wsubst; cbn [wctx wco];
            rewrite ?inst_subst, ?inst_sub_single; auto.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
      - split; intros Hwp Hfml; specialize (Hwp Hfml); revert Hwp;
          rewrite IHma; unfold wsubst; cbn [wctx wco];
            rewrite ?inst_subst, ?inst_sub_single; auto.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
        + apply wp_monotonic'. intros *.
          apply wp_monotonic'. intros *.
          unfold four, wtrans; cbn [wctx wsub].
          now rewrite sub_comp_assoc.
      - split; intros []; constructor; apply IHma; auto.
    Qed.

    Lemma wp_angelic {A} `{LR A} {w0} {x : option ùë∫} {œÉ : Ty}
          (k : Box (STerm œÉ -> SPath A) w0) (k_dcl : dcl k)
          (POST : Box (A -> SymInstance -> PROP) w0)
          (Œπ0 : SymInstance w0) :
      wp POST (angelic x œÉ k) Œπ0 <->
      exists v : Lit œÉ, wp POST (T k (lift v)) Œπ0.
    Proof.
      cbn. split; intros [v Hwp]; exists v; revert Hwp.
      - cbv [lr LRBox dcl LRImpl LRSPath LRInstance LRTerm LRPROP] in k_dcl.
        specialize (k_dcl (wsnoc w0 (fresh w0 x :: œÉ)) wsnoc_sup went_wsnoc_sup).
        specialize (k_dcl w0).
        pose proof (@wsubst_sup (wsnoc w0 (fresh w0 x :: œÉ)) (fresh w0 x) œÉ inctx_zero (lift v)).
        destruct w0 as [Œ£0 pc0].
        unfold wsnoc in *. cbn - [subst sub_single sub_wk1] in *.
        unfold wsnoc, wsubst in H0. cbn - [sub_single sub_wk1] in H0.
        rewrite <- subst_sub_comp in H0.
        admit.
      - admit.
    Admitted.

  End ModalWP.

End Mutators.
